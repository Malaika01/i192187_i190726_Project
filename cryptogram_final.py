{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "73dc6e50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MedMNIST v2.1.0 @ https://github.com/MedMNIST/MedMNIST/\n"
     ]
    }
   ],
   "source": [
    "# import necessary packages\n",
    "from tqdm import tqdm\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "import torch.utils.data as data\n",
    "import torchvision.transforms as transforms\n",
    "import medmnist\n",
    "from medmnist import INFO, Evaluator\n",
    "\n",
    "# Define the CNN class that inherits from the nn.Module class\n",
    "class CNN(nn.Module):\n",
    "    def __init__(self, in_channels, num_classes):\n",
    "        super(CNN, self).__init__()\n",
    "\n",
    "        # Define the first convolutional layer with 16 filters of size 3x3\n",
    "        # followed by a batch normalization layer and a ReLU activation function\n",
    "        self.layer1 = nn.Sequential(\n",
    "            nn.Conv2d(in_channels, 16, kernel_size=3),\n",
    "            nn.BatchNorm2d(16),\n",
    "            nn.ReLU())\n",
    "\n",
    "        # Define the second convolutional layer with 16 filters of size 3x3\n",
    "        # followed by a batch normalization layer, a ReLU activation function, and a max pooling layer with kernel size 2x2 and stride 2\n",
    "        self.layer2 = nn.Sequential(\n",
    "            nn.Conv2d(16, 16, kernel_size=3),\n",
    "            nn.BatchNorm2d(16),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(kernel_size=2, stride=2))\n",
    "\n",
    "        # Define the third convolutional layer with 64 filters of size 3x3\n",
    "        # followed by a batch normalization layer and a ReLU activation function\n",
    "        self.layer3 = nn.Sequential(\n",
    "            nn.Conv2d(16, 64, kernel_size=3),\n",
    "            nn.BatchNorm2d(64),\n",
    "            nn.ReLU())\n",
    "\n",
    "        # Define the fourth convolutional layer with 64 filters of size 3x3\n",
    "        # followed by a batch normalization layer and a ReLU activation function\n",
    "        self.layer4 = nn.Sequential(\n",
    "            nn.Conv2d(64, 64, kernel_size=3),\n",
    "            nn.BatchNorm2d(64),\n",
    "            nn.ReLU())\n",
    "\n",
    "        # Define the fifth convolutional layer with 64 filters of size 3x3 and padding of 1\n",
    "        # followed by a batch normalization layer, a ReLU activation function, and a max pooling layer with kernel size 2x2 and stride 2\n",
    "        self.layer5 = nn.Sequential(\n",
    "            nn.Conv2d(64, 64, kernel_size=3, padding=1),\n",
    "            nn.BatchNorm2d(64),\n",
    "            nn.ReLU(),\n",
    "            nn.MaxPool2d(kernel_size=2, stride=2))\n",
    "\n",
    "        # Define the fully connected layers with 128 units each and ReLU activation functions\n",
    "        # followed by a linear layer with num_classes units\n",
    "        self.fc = nn.Sequential(\n",
    "            nn.Linear(64 * 4 * 4, 128),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(128, 128),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(128, num_classes))\n",
    "\n",
    "    # Define the forward pass method for the CNN\n",
    "    def forward(self, x):\n",
    "        x = self.layer1(x)\n",
    "        x = self.layer2(x)\n",
    "        x = self.layer3(x)\n",
    "        x = self.layer4(x)\n",
    "        x = self.layer5(x)\n",
    "        x = x.view(x.size(0), -1)\n",
    "        x = self.fc(x)\n",
    "        return x\n",
    "    \n",
    "# print the version of the medmnist package\n",
    "print(f\"MedMNIST v{medmnist.__version__} @ {medmnist.HOMEPAGE}\")\n",
    "# set the data flag and download flag\n",
    "data_flag = 'chestmnist'\n",
    "download = True\n",
    "\n",
    "# get the information of the current dataset\n",
    "info = INFO[data_flag]\n",
    "task = info['task']\n",
    "n_channels = info['n_channels']\n",
    "n_classes = len(info['label'])\n",
    "\n",
    "# Instantiate the CNN model with the specified number of input channels and output classes\n",
    "model = CNN(in_channels=n_channels, num_classes=n_classes)\n",
    "m1 = torch.load('model1.pth')\n",
    "m2 = torch.load('model2.pth')\n",
    "m3 = torch.load('model3.pth')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7597251c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('layer1.0.weight',\n",
       "              tensor([[[[-0.0258, -0.0094,  0.0086],\n",
       "                        [ 0.1780,  0.2307, -0.3276],\n",
       "                        [ 0.1564, -0.1319, -0.1897]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 0.2244,  0.1674, -0.1184],\n",
       "                        [ 0.0363,  0.0734,  0.1073],\n",
       "                        [-0.1338,  0.0215, -0.3117]]],\n",
       "              \n",
       "              \n",
       "                      [[[-0.2553, -0.0431, -0.0155],\n",
       "                        [-0.1926, -0.2048, -0.1552],\n",
       "                        [ 0.3073, -0.3230, -0.0792]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 0.0677,  0.2683, -0.2440],\n",
       "                        [ 0.0131,  0.0071,  0.0521],\n",
       "                        [ 0.3071,  0.0118,  0.3307]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 0.2775, -0.0334, -0.1580],\n",
       "                        [-0.3001, -0.0274,  0.1601],\n",
       "                        [-0.2071, -0.1093,  0.0423]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 0.2647, -0.1823,  0.1614],\n",
       "                        [ 0.2019,  0.1155,  0.0101],\n",
       "                        [ 0.0238, -0.1896, -0.0961]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 0.1991, -0.1540, -0.2030],\n",
       "                        [-0.2863,  0.1523, -0.1779],\n",
       "                        [ 0.2964,  0.2861, -0.1964]]],\n",
       "              \n",
       "              \n",
       "                      [[[-0.1297, -0.1325, -0.0832],\n",
       "                        [ 0.1374, -0.1246,  0.2579],\n",
       "                        [-0.2433,  0.3310,  0.2354]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 0.0668, -0.2780, -0.1319],\n",
       "                        [ 0.1188,  0.1561,  0.1492],\n",
       "                        [-0.2403, -0.1548, -0.2556]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 0.2689, -0.1095,  0.1462],\n",
       "                        [ 0.1035,  0.1009,  0.1880],\n",
       "                        [ 0.1018, -0.1660, -0.0420]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 0.0908,  0.1648,  0.2363],\n",
       "                        [ 0.2458, -0.1959, -0.2875],\n",
       "                        [-0.1452, -0.2747, -0.2128]]],\n",
       "              \n",
       "              \n",
       "                      [[[-0.2912, -0.1212, -0.1792],\n",
       "                        [ 0.2044, -0.0671, -0.2403],\n",
       "                        [ 0.0783,  0.0411,  0.0538]]],\n",
       "              \n",
       "              \n",
       "                      [[[-0.2658,  0.1272,  0.0738],\n",
       "                        [ 0.2002, -0.0416,  0.1353],\n",
       "                        [-0.1531, -0.0459, -0.0027]]],\n",
       "              \n",
       "              \n",
       "                      [[[-0.3307, -0.0442,  0.2157],\n",
       "                        [-0.1314,  0.0916, -0.1877],\n",
       "                        [-0.0067,  0.2686, -0.0926]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 0.1652,  0.0167, -0.0736],\n",
       "                        [ 0.1864,  0.2507, -0.0615],\n",
       "                        [-0.1565, -0.1698,  0.0809]]],\n",
       "              \n",
       "              \n",
       "                      [[[-0.3072,  0.0891, -0.0134],\n",
       "                        [ 0.1199, -0.2963, -0.1703],\n",
       "                        [-0.1113,  0.0307, -0.3238]]]])),\n",
       "             ('layer1.0.bias',\n",
       "              tensor([-0.0898, -0.2973,  0.1420,  0.2569,  0.1633,  0.3017, -0.0312, -0.0314,\n",
       "                      -0.3111,  0.2640,  0.3073,  0.0827,  0.0060, -0.0209,  0.2489,  0.2154])),\n",
       "             ('layer1.1.weight',\n",
       "              tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])),\n",
       "             ('layer1.1.bias',\n",
       "              tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])),\n",
       "             ('layer1.1.running_mean',\n",
       "              tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])),\n",
       "             ('layer1.1.running_var',\n",
       "              tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])),\n",
       "             ('layer1.1.num_batches_tracked', tensor(0)),\n",
       "             ('layer2.0.weight',\n",
       "              tensor([[[[-3.8145e-02,  6.5791e-02,  6.4006e-02],\n",
       "                        [-8.0284e-02, -1.8184e-02, -5.1053e-03],\n",
       "                        [ 4.3289e-02, -3.9129e-02, -1.7935e-02]],\n",
       "              \n",
       "                       [[ 5.0532e-02, -3.2460e-02, -4.7076e-02],\n",
       "                        [-4.3364e-02,  3.2669e-02, -8.0272e-02],\n",
       "                        [-2.0443e-02, -7.4771e-02,  5.7890e-02]],\n",
       "              \n",
       "                       [[-6.0764e-03, -4.8296e-02, -4.6844e-02],\n",
       "                        [-1.3555e-02,  1.5407e-02, -8.1873e-02],\n",
       "                        [ 2.5193e-02,  6.2123e-02,  6.8403e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[ 3.2850e-02, -4.2329e-02, -5.7356e-02],\n",
       "                        [ 8.3110e-02, -2.5008e-02, -3.7979e-02],\n",
       "                        [ 6.1329e-02,  1.0299e-04, -1.1468e-03]],\n",
       "              \n",
       "                       [[ 7.6980e-02, -5.6358e-02, -3.5391e-02],\n",
       "                        [ 4.9354e-02,  3.4631e-02,  8.3394e-03],\n",
       "                        [ 8.1459e-02, -5.7636e-02,  2.2129e-02]],\n",
       "              \n",
       "                       [[-3.2580e-02,  7.5616e-02, -2.7988e-02],\n",
       "                        [-5.8876e-02,  7.7081e-02, -2.9212e-02],\n",
       "                        [ 1.7264e-02,  5.2784e-02,  6.6321e-02]]],\n",
       "              \n",
       "              \n",
       "                      [[[-2.4716e-02, -1.4004e-02, -7.9430e-02],\n",
       "                        [ 6.5314e-02,  2.0796e-02,  1.5197e-02],\n",
       "                        [ 1.6311e-02,  1.2867e-02, -1.0390e-02]],\n",
       "              \n",
       "                       [[ 5.9887e-02,  8.1654e-02, -1.7329e-02],\n",
       "                        [-1.1436e-02, -6.9844e-02,  1.6472e-02],\n",
       "                        [-3.5246e-02,  6.8054e-02, -1.2834e-02]],\n",
       "              \n",
       "                       [[ 1.9730e-02, -7.8337e-02,  1.6136e-02],\n",
       "                        [-4.0050e-02, -6.3377e-02, -8.2560e-02],\n",
       "                        [-6.3901e-03,  3.2684e-02,  3.7155e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[ 2.8474e-02, -5.7604e-02, -6.7480e-02],\n",
       "                        [ 7.1114e-02,  4.3920e-03, -6.3519e-03],\n",
       "                        [-4.9722e-02,  5.5064e-02,  6.6584e-02]],\n",
       "              \n",
       "                       [[-5.6906e-02, -5.5280e-02, -4.3275e-02],\n",
       "                        [ 3.4971e-02, -5.1855e-03,  8.7397e-03],\n",
       "                        [ 8.0122e-02,  7.4772e-02,  6.4665e-02]],\n",
       "              \n",
       "                       [[-1.2895e-02, -6.0678e-05,  5.6426e-02],\n",
       "                        [-5.7738e-02, -6.6320e-02,  3.4061e-03],\n",
       "                        [ 4.6388e-02, -5.3046e-02,  5.9150e-02]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 8.2355e-02,  4.6297e-02, -3.7500e-02],\n",
       "                        [-1.0517e-03,  4.3603e-02, -3.1306e-02],\n",
       "                        [-5.4361e-02, -2.2907e-03, -6.3678e-02]],\n",
       "              \n",
       "                       [[ 2.0893e-02,  7.9774e-02, -1.9342e-03],\n",
       "                        [ 1.3634e-02,  5.1351e-02, -1.8789e-02],\n",
       "                        [-1.1154e-02, -5.9929e-02, -2.4789e-02]],\n",
       "              \n",
       "                       [[-3.6626e-02,  5.5218e-02, -6.9674e-02],\n",
       "                        [ 6.2893e-02,  2.7250e-02,  2.7651e-02],\n",
       "                        [-3.3603e-02,  6.1313e-02,  6.9015e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[ 3.1941e-02,  3.6891e-02,  4.9483e-02],\n",
       "                        [ 4.1412e-02, -1.9649e-02, -5.3030e-02],\n",
       "                        [ 3.2413e-02, -7.4867e-02, -8.1107e-02]],\n",
       "              \n",
       "                       [[-4.2541e-02,  2.3158e-02,  3.9840e-02],\n",
       "                        [-3.8064e-02,  5.1888e-02, -6.2363e-02],\n",
       "                        [-6.1240e-02, -6.6529e-02,  1.7264e-02]],\n",
       "              \n",
       "                       [[-3.7088e-02, -5.7793e-02,  6.8000e-02],\n",
       "                        [ 7.5914e-02,  6.9956e-03,  9.7644e-03],\n",
       "                        [-4.2855e-02,  5.5557e-02,  2.5987e-02]]],\n",
       "              \n",
       "              \n",
       "                      ...,\n",
       "              \n",
       "              \n",
       "                      [[[-4.3242e-02,  7.6889e-02, -7.2005e-02],\n",
       "                        [ 5.3661e-02,  2.3942e-02, -7.9554e-02],\n",
       "                        [-2.2491e-02, -4.6528e-02,  2.2314e-02]],\n",
       "              \n",
       "                       [[ 7.0123e-02, -6.0661e-03, -2.6194e-02],\n",
       "                        [-8.1215e-02, -2.8269e-02,  3.1938e-03],\n",
       "                        [-5.6642e-03,  8.1938e-02,  2.7904e-02]],\n",
       "              \n",
       "                       [[-6.7494e-02, -6.1334e-02, -5.4602e-02],\n",
       "                        [ 4.7721e-02,  3.1581e-02, -5.3539e-02],\n",
       "                        [ 7.9521e-02,  3.0909e-03, -1.9110e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[ 7.7549e-02, -4.4863e-02,  2.7415e-02],\n",
       "                        [-5.5488e-02, -5.2546e-02, -2.3245e-03],\n",
       "                        [-1.4962e-02,  3.0868e-02,  2.3525e-02]],\n",
       "              \n",
       "                       [[-6.7087e-02,  8.1612e-02,  8.3231e-02],\n",
       "                        [ 5.9540e-02,  3.6396e-03, -5.5012e-02],\n",
       "                        [-1.9424e-02, -1.3195e-02,  7.7427e-02]],\n",
       "              \n",
       "                       [[ 3.0632e-02,  6.0370e-02, -6.0570e-02],\n",
       "                        [ 6.5767e-02,  4.2143e-02, -7.9516e-02],\n",
       "                        [-6.1400e-02, -5.7683e-02, -6.2700e-02]]],\n",
       "              \n",
       "              \n",
       "                      [[[-9.5246e-03, -4.9303e-02,  6.8449e-02],\n",
       "                        [-2.0838e-02, -4.3788e-02,  5.9584e-02],\n",
       "                        [ 2.3701e-02, -5.4770e-02,  7.7591e-02]],\n",
       "              \n",
       "                       [[-3.4729e-02, -2.2464e-02,  7.2531e-02],\n",
       "                        [-5.6664e-02, -1.7597e-02,  6.1637e-02],\n",
       "                        [ 7.7470e-04,  3.3731e-02,  7.2918e-02]],\n",
       "              \n",
       "                       [[-5.2648e-02, -8.1230e-02,  7.2580e-04],\n",
       "                        [-2.6511e-02,  7.6536e-03,  4.4883e-02],\n",
       "                        [-3.3716e-02,  7.8035e-02, -6.9947e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[-3.5010e-02,  2.2199e-02,  7.9075e-02],\n",
       "                        [-1.6569e-02, -4.8881e-02,  2.0505e-02],\n",
       "                        [ 4.9772e-02, -1.8309e-02,  2.5897e-02]],\n",
       "              \n",
       "                       [[-4.8368e-02,  1.0431e-02, -2.9814e-02],\n",
       "                        [-1.8869e-02,  6.2840e-02, -8.3122e-02],\n",
       "                        [ 7.1205e-02,  3.5631e-02,  7.1799e-02]],\n",
       "              \n",
       "                       [[ 5.1625e-02, -3.7196e-02, -2.5321e-02],\n",
       "                        [-5.0405e-02, -2.6980e-02,  5.0725e-02],\n",
       "                        [ 6.6948e-02,  1.8780e-02, -4.0335e-02]]],\n",
       "              \n",
       "              \n",
       "                      [[[-6.0199e-02, -1.6129e-02, -2.9336e-02],\n",
       "                        [-3.1407e-02,  6.3154e-03, -7.0182e-02],\n",
       "                        [ 9.6082e-03, -3.2594e-02,  1.2236e-02]],\n",
       "              \n",
       "                       [[ 7.8029e-02,  6.3133e-02,  5.0757e-02],\n",
       "                        [-6.7462e-02,  2.4088e-02,  6.1593e-02],\n",
       "                        [-3.7860e-02,  7.1149e-02, -2.9875e-02]],\n",
       "              \n",
       "                       [[-6.1841e-02, -6.8202e-03, -5.6317e-02],\n",
       "                        [ 1.7616e-02, -2.8608e-03, -1.1037e-02],\n",
       "                        [-7.9256e-02,  5.0947e-02,  3.5282e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[-7.7006e-02, -5.0624e-02, -5.6147e-02],\n",
       "                        [ 7.5582e-03,  8.0157e-02, -4.1210e-02],\n",
       "                        [-3.4861e-02,  3.6326e-02, -6.9309e-02]],\n",
       "              \n",
       "                       [[-5.6149e-02, -5.7902e-02,  4.1557e-02],\n",
       "                        [-5.8067e-02, -1.1042e-02, -1.1127e-03],\n",
       "                        [ 3.8581e-02,  5.6138e-02,  4.9498e-02]],\n",
       "              \n",
       "                       [[-1.8410e-02,  4.5665e-02, -2.5797e-02],\n",
       "                        [-3.1069e-02,  4.4154e-02, -1.8195e-02],\n",
       "                        [-3.9035e-02,  2.2429e-02, -4.8782e-02]]]])),\n",
       "             ('layer2.0.bias',\n",
       "              tensor([-0.0220,  0.0241, -0.0610,  0.0166, -0.0034,  0.0013,  0.0409, -0.0805,\n",
       "                      -0.0035,  0.0537,  0.0237,  0.0797,  0.0121,  0.0397, -0.0775, -0.0004])),\n",
       "             ('layer2.1.weight',\n",
       "              tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])),\n",
       "             ('layer2.1.bias',\n",
       "              tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])),\n",
       "             ('layer2.1.running_mean',\n",
       "              tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])),\n",
       "             ('layer2.1.running_var',\n",
       "              tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])),\n",
       "             ('layer2.1.num_batches_tracked', tensor(0)),\n",
       "             ('layer3.0.weight',\n",
       "              tensor([[[[-7.3020e-02, -6.5717e-02,  4.3495e-03],\n",
       "                        [ 6.2916e-03,  5.7612e-02,  6.3036e-03],\n",
       "                        [ 2.1711e-02, -6.3544e-02, -7.9549e-02]],\n",
       "              \n",
       "                       [[ 4.9975e-02, -2.7964e-02, -9.5345e-03],\n",
       "                        [ 4.2090e-02,  7.1699e-02, -5.5055e-02],\n",
       "                        [ 3.0271e-02,  5.5944e-02,  6.7145e-02]],\n",
       "              \n",
       "                       [[ 2.9197e-02, -7.5132e-02, -7.0848e-02],\n",
       "                        [-3.3701e-02,  2.0532e-02, -4.6241e-03],\n",
       "                        [ 7.6172e-02, -5.0410e-03, -1.3472e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[-9.6346e-03,  2.7011e-02,  4.6450e-02],\n",
       "                        [ 8.0096e-03, -6.3436e-02, -8.0697e-02],\n",
       "                        [-6.5074e-02,  9.6645e-03,  3.6314e-02]],\n",
       "              \n",
       "                       [[-2.2588e-02, -1.1026e-02, -2.2790e-03],\n",
       "                        [-6.3206e-02, -5.8176e-02, -5.3936e-02],\n",
       "                        [-1.7637e-02,  2.2563e-02, -2.7539e-02]],\n",
       "              \n",
       "                       [[-7.7700e-03,  2.1889e-02, -2.0325e-02],\n",
       "                        [ 1.2556e-02, -8.2904e-02,  6.1681e-02],\n",
       "                        [-4.4568e-02,  6.8254e-02, -7.0816e-02]]],\n",
       "              \n",
       "              \n",
       "                      [[[-8.1393e-02,  8.0760e-02, -6.5390e-02],\n",
       "                        [-3.8356e-02,  4.3192e-02,  3.1752e-02],\n",
       "                        [ 3.4551e-02,  7.2688e-03,  4.4283e-02]],\n",
       "              \n",
       "                       [[-6.0130e-02,  2.0234e-02,  3.5999e-02],\n",
       "                        [ 9.3037e-04, -4.4915e-02,  6.9019e-02],\n",
       "                        [ 4.1398e-02, -1.0374e-02,  5.4164e-03]],\n",
       "              \n",
       "                       [[-1.7476e-02,  1.9579e-02, -2.0701e-02],\n",
       "                        [ 5.5451e-02,  1.4482e-02, -6.0064e-02],\n",
       "                        [ 2.1073e-02, -4.2673e-02, -6.5683e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[-6.5063e-02, -2.5632e-02,  5.4431e-02],\n",
       "                        [-9.9855e-03, -4.0892e-02, -3.6254e-02],\n",
       "                        [ 5.7287e-02, -6.1491e-02, -2.8884e-02]],\n",
       "              \n",
       "                       [[ 5.7548e-02,  7.7410e-02, -7.0291e-02],\n",
       "                        [-6.2475e-03, -4.3922e-02,  2.2301e-02],\n",
       "                        [ 5.2571e-02, -6.8365e-02, -1.6462e-02]],\n",
       "              \n",
       "                       [[ 6.5148e-02,  4.9761e-02, -3.1777e-02],\n",
       "                        [ 4.7945e-02,  2.5934e-02, -1.6334e-02],\n",
       "                        [ 3.9566e-02,  2.3113e-02,  4.1558e-02]]],\n",
       "              \n",
       "              \n",
       "                      [[[-6.2784e-03, -6.3345e-02, -5.3587e-02],\n",
       "                        [-3.7810e-02,  7.0539e-02, -1.8989e-02],\n",
       "                        [-4.7240e-02,  3.6696e-02, -4.2751e-02]],\n",
       "              \n",
       "                       [[ 4.5188e-02,  7.3279e-02, -5.0082e-02],\n",
       "                        [-7.0390e-02, -6.7701e-02, -6.1824e-02],\n",
       "                        [ 4.3215e-02, -2.9094e-02, -5.5935e-02]],\n",
       "              \n",
       "                       [[ 2.5850e-02, -5.7421e-02, -5.8005e-02],\n",
       "                        [-8.0738e-02, -9.9423e-03, -4.0854e-02],\n",
       "                        [-7.8543e-02,  8.2302e-02,  8.1366e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[ 6.4190e-02,  1.5369e-02, -3.8380e-02],\n",
       "                        [ 4.2574e-02, -2.9924e-02, -5.1161e-02],\n",
       "                        [ 1.9002e-02, -7.5331e-02, -2.7366e-02]],\n",
       "              \n",
       "                       [[-6.6474e-02,  4.6556e-02,  4.0329e-02],\n",
       "                        [ 4.4509e-02, -6.6324e-02, -3.0258e-02],\n",
       "                        [ 5.7417e-02, -5.9322e-02, -5.2277e-02]],\n",
       "              \n",
       "                       [[ 1.0581e-02, -8.9129e-03,  3.3051e-02],\n",
       "                        [-5.3271e-02,  1.6511e-02,  2.5000e-02],\n",
       "                        [ 5.2759e-03,  4.2418e-02,  3.5969e-02]]],\n",
       "              \n",
       "              \n",
       "                      ...,\n",
       "              \n",
       "              \n",
       "                      [[[ 3.7593e-02, -3.3518e-02, -4.8997e-03],\n",
       "                        [-7.4889e-02,  6.0557e-02, -5.2909e-02],\n",
       "                        [-5.5002e-02, -1.3829e-02,  7.4750e-02]],\n",
       "              \n",
       "                       [[-5.3718e-03,  7.5099e-02,  4.1580e-02],\n",
       "                        [-1.0334e-02,  1.5875e-02, -2.1503e-02],\n",
       "                        [-1.2929e-02, -1.0236e-02, -8.9745e-03]],\n",
       "              \n",
       "                       [[-2.5569e-02, -6.0144e-02, -2.3234e-02],\n",
       "                        [-7.0100e-02, -6.9370e-02,  6.5755e-02],\n",
       "                        [ 6.3588e-02, -2.4628e-02,  7.9575e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[ 1.5980e-02, -5.1253e-02,  3.8691e-05],\n",
       "                        [-6.9890e-02,  5.7742e-02,  4.5986e-02],\n",
       "                        [-8.2374e-02, -6.8271e-02, -4.9452e-02]],\n",
       "              \n",
       "                       [[-5.7216e-02, -7.8607e-02,  1.7675e-03],\n",
       "                        [-5.5025e-02, -6.2014e-02,  1.2517e-02],\n",
       "                        [ 1.3800e-02, -3.2677e-02, -8.1315e-02]],\n",
       "              \n",
       "                       [[ 3.9356e-02, -1.5638e-02, -3.5153e-02],\n",
       "                        [ 6.2103e-02, -4.3715e-02, -7.8626e-03],\n",
       "                        [-6.3149e-02, -1.0732e-02,  5.1991e-02]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 4.3227e-02,  8.7360e-04, -8.0882e-02],\n",
       "                        [ 6.5384e-02, -6.4084e-02,  6.7456e-03],\n",
       "                        [-6.2451e-02,  6.9280e-02,  6.7663e-02]],\n",
       "              \n",
       "                       [[-1.9283e-02, -2.8203e-02,  3.1411e-02],\n",
       "                        [-1.2584e-02, -1.2642e-02, -1.6818e-02],\n",
       "                        [-1.9925e-02, -5.5122e-02,  1.0806e-02]],\n",
       "              \n",
       "                       [[-2.1482e-02,  7.9682e-02, -7.7452e-02],\n",
       "                        [ 1.3517e-02,  1.5688e-02,  3.2609e-02],\n",
       "                        [-2.7028e-02,  2.8386e-02, -8.3318e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[-5.9104e-02, -2.8877e-02, -8.0716e-02],\n",
       "                        [ 2.1959e-03,  8.7384e-03,  4.0158e-02],\n",
       "                        [-1.7054e-02,  5.2759e-02,  6.2710e-03]],\n",
       "              \n",
       "                       [[ 8.2162e-02, -8.3263e-02, -6.2417e-02],\n",
       "                        [-8.9364e-03, -5.3660e-02,  7.5010e-02],\n",
       "                        [-3.6604e-03, -3.3341e-02, -1.2051e-02]],\n",
       "              \n",
       "                       [[ 1.9861e-02,  7.4941e-02,  3.5238e-02],\n",
       "                        [ 5.0183e-02,  5.6069e-02, -5.8825e-02],\n",
       "                        [-4.2642e-03, -3.8411e-02,  7.4437e-02]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 2.9859e-02,  4.9851e-02, -2.5206e-02],\n",
       "                        [-5.1932e-02,  4.1474e-02,  6.8673e-02],\n",
       "                        [ 1.3162e-02, -7.6356e-02,  1.7356e-02]],\n",
       "              \n",
       "                       [[-5.2068e-02,  5.4368e-03, -2.1704e-02],\n",
       "                        [ 1.2755e-02,  1.9935e-02, -5.8418e-02],\n",
       "                        [-6.1783e-02,  6.4725e-02,  1.6332e-02]],\n",
       "              \n",
       "                       [[ 3.3618e-02, -6.3190e-02, -2.8018e-02],\n",
       "                        [-2.8675e-02, -4.5795e-02,  4.6271e-02],\n",
       "                        [ 3.5203e-02, -7.7048e-03, -4.9623e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[-1.5101e-02,  5.1916e-02, -2.1483e-02],\n",
       "                        [ 3.3706e-02,  2.8277e-02, -3.2004e-02],\n",
       "                        [ 4.5525e-02, -6.5851e-02,  2.0379e-02]],\n",
       "              \n",
       "                       [[ 7.0325e-02,  3.0419e-02,  5.6755e-02],\n",
       "                        [-6.3130e-03, -4.7111e-02,  5.3370e-03],\n",
       "                        [ 5.0319e-02, -2.4994e-02, -1.9295e-02]],\n",
       "              \n",
       "                       [[-7.1707e-02,  3.2556e-02, -6.4103e-02],\n",
       "                        [ 2.8533e-02,  5.2240e-02,  4.0324e-02],\n",
       "                        [-6.3540e-02,  2.0828e-02,  3.5850e-03]]]])),\n",
       "             ('layer3.0.bias',\n",
       "              tensor([ 0.0601, -0.0126, -0.0725, -0.0015,  0.0215, -0.0042, -0.0253, -0.0269,\n",
       "                       0.0493,  0.0022, -0.0417,  0.0401,  0.0016,  0.0009,  0.0049, -0.0069,\n",
       "                       0.0799, -0.0333, -0.0393,  0.0087, -0.0682,  0.0705, -0.0432,  0.0185,\n",
       "                      -0.0516, -0.0406,  0.0495, -0.0725, -0.0413,  0.0523, -0.0302, -0.0012,\n",
       "                       0.0740, -0.0771,  0.0060, -0.0680,  0.0776,  0.0345, -0.0272, -0.0143,\n",
       "                      -0.0614,  0.0052,  0.0610, -0.0585, -0.0047, -0.0829, -0.0111, -0.0113,\n",
       "                      -0.0577, -0.0266, -0.0338,  0.0537, -0.0817,  0.0568, -0.0444,  0.0379,\n",
       "                      -0.0401,  0.0073,  0.0037,  0.0390,  0.0020,  0.0447,  0.0172,  0.0007])),\n",
       "             ('layer3.1.weight',\n",
       "              tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])),\n",
       "             ('layer3.1.bias',\n",
       "              tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "                      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "                      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])),\n",
       "             ('layer3.1.running_mean',\n",
       "              tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "                      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "                      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])),\n",
       "             ('layer3.1.running_var',\n",
       "              tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])),\n",
       "             ('layer3.1.num_batches_tracked', tensor(0)),\n",
       "             ('layer4.0.weight',\n",
       "              tensor([[[[ 0.0048, -0.0330,  0.0227],\n",
       "                        [-0.0356, -0.0148,  0.0199],\n",
       "                        [-0.0405, -0.0152, -0.0077]],\n",
       "              \n",
       "                       [[-0.0316, -0.0128, -0.0286],\n",
       "                        [-0.0390, -0.0104, -0.0076],\n",
       "                        [-0.0184, -0.0250,  0.0138]],\n",
       "              \n",
       "                       [[ 0.0202, -0.0178, -0.0207],\n",
       "                        [-0.0365, -0.0399,  0.0326],\n",
       "                        [ 0.0290, -0.0360, -0.0159]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[ 0.0093, -0.0143,  0.0341],\n",
       "                        [-0.0050,  0.0368, -0.0353],\n",
       "                        [ 0.0416, -0.0053, -0.0017]],\n",
       "              \n",
       "                       [[ 0.0007,  0.0219,  0.0318],\n",
       "                        [-0.0325,  0.0126, -0.0130],\n",
       "                        [ 0.0311,  0.0315,  0.0007]],\n",
       "              \n",
       "                       [[-0.0122,  0.0118, -0.0404],\n",
       "                        [-0.0021,  0.0393, -0.0289],\n",
       "                        [ 0.0114, -0.0364,  0.0146]]],\n",
       "              \n",
       "              \n",
       "                      [[[-0.0104, -0.0206,  0.0190],\n",
       "                        [-0.0385, -0.0203,  0.0039],\n",
       "                        [ 0.0072, -0.0016,  0.0069]],\n",
       "              \n",
       "                       [[-0.0242,  0.0245,  0.0018],\n",
       "                        [-0.0395, -0.0018,  0.0368],\n",
       "                        [-0.0375, -0.0091, -0.0364]],\n",
       "              \n",
       "                       [[-0.0228,  0.0301, -0.0055],\n",
       "                        [-0.0009,  0.0299, -0.0216],\n",
       "                        [-0.0009,  0.0408,  0.0013]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[-0.0410,  0.0280, -0.0139],\n",
       "                        [-0.0249, -0.0260, -0.0226],\n",
       "                        [-0.0242, -0.0052,  0.0391]],\n",
       "              \n",
       "                       [[-0.0088, -0.0020,  0.0004],\n",
       "                        [ 0.0112, -0.0241,  0.0325],\n",
       "                        [ 0.0387, -0.0194, -0.0129]],\n",
       "              \n",
       "                       [[ 0.0400,  0.0128,  0.0282],\n",
       "                        [ 0.0415,  0.0256,  0.0167],\n",
       "                        [-0.0117, -0.0359, -0.0117]]],\n",
       "              \n",
       "              \n",
       "                      [[[-0.0058,  0.0287, -0.0366],\n",
       "                        [-0.0386, -0.0312, -0.0281],\n",
       "                        [-0.0010,  0.0277,  0.0288]],\n",
       "              \n",
       "                       [[ 0.0255,  0.0160,  0.0376],\n",
       "                        [-0.0163,  0.0157,  0.0337],\n",
       "                        [-0.0201,  0.0064, -0.0098]],\n",
       "              \n",
       "                       [[-0.0006, -0.0284, -0.0018],\n",
       "                        [-0.0116, -0.0048,  0.0293],\n",
       "                        [-0.0141, -0.0015,  0.0340]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[ 0.0234,  0.0293, -0.0172],\n",
       "                        [ 0.0064, -0.0081, -0.0262],\n",
       "                        [-0.0012,  0.0344,  0.0173]],\n",
       "              \n",
       "                       [[ 0.0412,  0.0242,  0.0150],\n",
       "                        [ 0.0144, -0.0288,  0.0159],\n",
       "                        [ 0.0339,  0.0049, -0.0130]],\n",
       "              \n",
       "                       [[ 0.0384,  0.0380, -0.0087],\n",
       "                        [-0.0010,  0.0167,  0.0113],\n",
       "                        [-0.0265, -0.0208,  0.0309]]],\n",
       "              \n",
       "              \n",
       "                      ...,\n",
       "              \n",
       "              \n",
       "                      [[[ 0.0173,  0.0155,  0.0367],\n",
       "                        [-0.0340,  0.0161,  0.0005],\n",
       "                        [ 0.0040, -0.0235, -0.0336]],\n",
       "              \n",
       "                       [[-0.0314,  0.0020,  0.0185],\n",
       "                        [-0.0239, -0.0191, -0.0402],\n",
       "                        [ 0.0018, -0.0066, -0.0003]],\n",
       "              \n",
       "                       [[ 0.0201,  0.0156, -0.0193],\n",
       "                        [-0.0186, -0.0279, -0.0225],\n",
       "                        [ 0.0041, -0.0043,  0.0192]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[-0.0335,  0.0056, -0.0222],\n",
       "                        [-0.0194, -0.0006, -0.0195],\n",
       "                        [ 0.0090,  0.0151,  0.0291]],\n",
       "              \n",
       "                       [[-0.0202,  0.0015,  0.0388],\n",
       "                        [ 0.0202,  0.0284,  0.0097],\n",
       "                        [-0.0395,  0.0404,  0.0319]],\n",
       "              \n",
       "                       [[-0.0378,  0.0088,  0.0098],\n",
       "                        [ 0.0109,  0.0074,  0.0226],\n",
       "                        [ 0.0175, -0.0044, -0.0196]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 0.0012, -0.0069,  0.0375],\n",
       "                        [ 0.0293, -0.0195,  0.0369],\n",
       "                        [-0.0266, -0.0207, -0.0283]],\n",
       "              \n",
       "                       [[ 0.0396, -0.0268,  0.0353],\n",
       "                        [ 0.0141, -0.0331,  0.0055],\n",
       "                        [-0.0207,  0.0109, -0.0197]],\n",
       "              \n",
       "                       [[ 0.0385,  0.0027,  0.0259],\n",
       "                        [ 0.0117, -0.0176,  0.0389],\n",
       "                        [-0.0104,  0.0149,  0.0389]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[-0.0278, -0.0170,  0.0154],\n",
       "                        [-0.0219,  0.0376,  0.0321],\n",
       "                        [ 0.0002,  0.0198,  0.0245]],\n",
       "              \n",
       "                       [[ 0.0039, -0.0357,  0.0113],\n",
       "                        [ 0.0172,  0.0046, -0.0302],\n",
       "                        [-0.0214, -0.0054, -0.0385]],\n",
       "              \n",
       "                       [[ 0.0259,  0.0103,  0.0329],\n",
       "                        [ 0.0317, -0.0083, -0.0144],\n",
       "                        [-0.0381,  0.0381,  0.0073]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 0.0022, -0.0181, -0.0124],\n",
       "                        [ 0.0063,  0.0365, -0.0180],\n",
       "                        [-0.0197,  0.0001, -0.0017]],\n",
       "              \n",
       "                       [[ 0.0084, -0.0240, -0.0402],\n",
       "                        [-0.0164,  0.0247, -0.0011],\n",
       "                        [-0.0283,  0.0080,  0.0208]],\n",
       "              \n",
       "                       [[-0.0318, -0.0077, -0.0084],\n",
       "                        [ 0.0130, -0.0298,  0.0182],\n",
       "                        [-0.0146,  0.0090, -0.0165]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[ 0.0219,  0.0353, -0.0192],\n",
       "                        [-0.0136, -0.0324, -0.0262],\n",
       "                        [ 0.0100,  0.0239,  0.0313]],\n",
       "              \n",
       "                       [[-0.0237,  0.0411,  0.0266],\n",
       "                        [-0.0220, -0.0100, -0.0223],\n",
       "                        [ 0.0101,  0.0226, -0.0244]],\n",
       "              \n",
       "                       [[-0.0003, -0.0358,  0.0292],\n",
       "                        [-0.0095, -0.0274, -0.0140],\n",
       "                        [-0.0159,  0.0280, -0.0101]]]])),\n",
       "             ('layer4.0.bias',\n",
       "              tensor([-0.0316,  0.0135,  0.0032, -0.0215, -0.0134, -0.0065,  0.0334,  0.0005,\n",
       "                       0.0245,  0.0326,  0.0025,  0.0276, -0.0114, -0.0399, -0.0007,  0.0235,\n",
       "                       0.0356,  0.0324,  0.0388, -0.0313, -0.0003, -0.0276, -0.0234, -0.0351,\n",
       "                      -0.0320, -0.0255, -0.0300, -0.0244,  0.0292,  0.0371, -0.0353, -0.0104,\n",
       "                       0.0391,  0.0322, -0.0014, -0.0012,  0.0398,  0.0365,  0.0247,  0.0126,\n",
       "                      -0.0014,  0.0001, -0.0305, -0.0185,  0.0388, -0.0087, -0.0268,  0.0021,\n",
       "                       0.0158, -0.0091, -0.0287, -0.0027, -0.0195, -0.0357,  0.0020,  0.0315,\n",
       "                       0.0265,  0.0158, -0.0283, -0.0363, -0.0195,  0.0058,  0.0011, -0.0354])),\n",
       "             ('layer4.1.weight',\n",
       "              tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])),\n",
       "             ('layer4.1.bias',\n",
       "              tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "                      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "                      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])),\n",
       "             ('layer4.1.running_mean',\n",
       "              tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "                      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "                      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])),\n",
       "             ('layer4.1.running_var',\n",
       "              tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])),\n",
       "             ('layer4.1.num_batches_tracked', tensor(0)),\n",
       "             ('layer5.0.weight',\n",
       "              tensor([[[[-3.7961e-02, -3.4644e-02,  3.4042e-02],\n",
       "                        [-1.4331e-02, -1.4763e-02,  3.1564e-02],\n",
       "                        [ 2.9008e-02, -2.7369e-02, -1.7879e-02]],\n",
       "              \n",
       "                       [[-1.7344e-02, -2.0731e-02, -2.9575e-02],\n",
       "                        [ 2.4207e-02, -2.6749e-02,  9.0459e-03],\n",
       "                        [ 1.0478e-02,  9.3604e-03, -3.0825e-02]],\n",
       "              \n",
       "                       [[ 3.3392e-02,  3.6769e-02,  4.2041e-03],\n",
       "                        [ 2.4312e-02, -3.3395e-02,  1.8824e-02],\n",
       "                        [ 3.7625e-02,  2.2956e-02,  1.9372e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[ 7.4801e-03, -3.3558e-02, -4.0946e-02],\n",
       "                        [-2.1521e-02, -9.0120e-03,  4.8449e-03],\n",
       "                        [-3.5025e-02, -2.3085e-02, -3.2585e-02]],\n",
       "              \n",
       "                       [[ 1.0730e-02,  2.2903e-02,  1.7529e-02],\n",
       "                        [ 3.2347e-02,  2.6795e-02, -1.7429e-02],\n",
       "                        [ 3.9150e-03,  1.4165e-02, -5.5611e-03]],\n",
       "              \n",
       "                       [[ 2.0951e-02,  2.3937e-02, -2.2980e-02],\n",
       "                        [ 2.0774e-02, -2.6358e-02,  1.6559e-02],\n",
       "                        [ 2.2632e-02, -1.1605e-02, -3.7811e-02]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 3.4591e-02, -4.6782e-03, -1.7450e-02],\n",
       "                        [ 2.1771e-02,  3.9709e-03, -2.9653e-02],\n",
       "                        [ 1.0408e-03,  2.7975e-02, -3.0328e-02]],\n",
       "              \n",
       "                       [[-4.6979e-03, -6.1435e-04, -3.0221e-03],\n",
       "                        [-9.7537e-04,  2.9469e-02, -5.5712e-03],\n",
       "                        [-6.0443e-03, -3.4456e-02, -3.6806e-02]],\n",
       "              \n",
       "                       [[ 1.6449e-02, -1.4392e-03,  2.4660e-02],\n",
       "                        [-1.5179e-02, -8.3701e-03, -4.0163e-02],\n",
       "                        [ 2.4186e-02,  1.5709e-02,  3.8117e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[-3.2998e-02, -2.9096e-02,  3.6412e-03],\n",
       "                        [ 1.7745e-04,  5.9153e-03, -3.8761e-02],\n",
       "                        [-1.1732e-03, -1.8532e-03, -2.6196e-02]],\n",
       "              \n",
       "                       [[-1.2477e-02,  3.4438e-02,  2.0090e-02],\n",
       "                        [ 3.1650e-02,  2.1270e-02, -6.3967e-03],\n",
       "                        [-3.7555e-02, -3.9741e-02,  1.2659e-02]],\n",
       "              \n",
       "                       [[ 4.1907e-03,  1.4239e-02, -2.4762e-02],\n",
       "                        [ 1.6547e-02,  1.1218e-02, -3.8861e-02],\n",
       "                        [-1.4508e-02, -1.1810e-02,  1.0783e-02]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 7.4635e-03, -2.1269e-02, -6.0851e-03],\n",
       "                        [-3.8972e-02, -2.6393e-02, -6.6549e-03],\n",
       "                        [ 1.7478e-02, -3.1574e-02, -7.8900e-03]],\n",
       "              \n",
       "                       [[ 2.4153e-02, -3.8602e-02, -3.9032e-02],\n",
       "                        [-3.7483e-02,  2.6376e-02, -3.1146e-02],\n",
       "                        [-5.8591e-03, -3.4523e-02,  5.1831e-03]],\n",
       "              \n",
       "                       [[-8.9519e-04, -1.6178e-02,  3.2999e-02],\n",
       "                        [ 3.8371e-02, -3.4081e-02, -7.9874e-03],\n",
       "                        [ 3.4623e-02,  2.4534e-02,  1.4066e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[-1.9890e-02,  1.9590e-02,  9.3770e-03],\n",
       "                        [ 8.2238e-03, -1.1704e-02,  4.1216e-02],\n",
       "                        [ 2.9441e-02,  3.8877e-02, -3.6484e-02]],\n",
       "              \n",
       "                       [[-2.5708e-02,  3.8466e-03,  2.2557e-02],\n",
       "                        [-3.6890e-02,  1.8812e-02, -1.2718e-02],\n",
       "                        [-2.3337e-03, -7.3243e-03, -2.3260e-02]],\n",
       "              \n",
       "                       [[ 2.8307e-02, -2.8454e-02,  2.5584e-02],\n",
       "                        [ 1.5417e-03,  7.4791e-03, -8.8975e-03],\n",
       "                        [-3.1359e-02, -1.2316e-02, -2.4851e-02]]],\n",
       "              \n",
       "              \n",
       "                      ...,\n",
       "              \n",
       "              \n",
       "                      [[[-2.1370e-02, -9.7329e-04, -3.9567e-02],\n",
       "                        [-2.9617e-02,  3.8934e-02,  1.0755e-02],\n",
       "                        [ 3.8981e-02, -5.4739e-03, -3.4779e-02]],\n",
       "              \n",
       "                       [[-6.7303e-04,  2.7915e-02, -3.5017e-02],\n",
       "                        [-2.3891e-02,  2.0483e-02, -1.5542e-05],\n",
       "                        [-3.0945e-02, -2.4572e-02,  2.0675e-02]],\n",
       "              \n",
       "                       [[ 2.4941e-02,  3.2194e-03,  2.7051e-02],\n",
       "                        [ 2.3286e-02, -9.8205e-03, -1.7571e-02],\n",
       "                        [-1.4732e-02, -9.5215e-03, -1.3079e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[ 7.1889e-04, -3.3893e-02,  1.7175e-02],\n",
       "                        [ 1.0157e-02, -7.5590e-03,  3.5853e-02],\n",
       "                        [-3.7521e-03, -8.5445e-04,  1.8385e-02]],\n",
       "              \n",
       "                       [[-3.2881e-02, -1.3499e-02, -3.3212e-03],\n",
       "                        [-2.5167e-02,  2.3887e-02, -3.1485e-02],\n",
       "                        [ 2.9092e-02,  2.9606e-02,  1.7586e-02]],\n",
       "              \n",
       "                       [[ 9.1320e-03, -3.1089e-02,  3.0053e-02],\n",
       "                        [ 2.5356e-02,  2.1866e-02, -1.4650e-02],\n",
       "                        [ 1.3445e-02, -1.4992e-02, -3.9576e-02]]],\n",
       "              \n",
       "              \n",
       "                      [[[-1.3080e-02, -1.9461e-02, -3.3863e-02],\n",
       "                        [ 2.3193e-03, -2.6294e-02, -1.4551e-02],\n",
       "                        [ 3.5172e-02,  2.2328e-02,  1.3083e-02]],\n",
       "              \n",
       "                       [[-1.0925e-02, -2.7462e-02, -6.7190e-03],\n",
       "                        [-2.9719e-02,  3.2847e-02, -2.1557e-02],\n",
       "                        [ 2.5284e-02,  1.6483e-02, -3.1303e-02]],\n",
       "              \n",
       "                       [[-2.4257e-02, -1.1342e-02,  3.6914e-02],\n",
       "                        [ 3.6148e-02,  3.0372e-02,  1.7176e-02],\n",
       "                        [-3.4009e-02,  3.6617e-02,  3.2491e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[-2.6991e-02,  3.3650e-03,  3.4972e-04],\n",
       "                        [ 1.4401e-03, -8.7855e-03, -3.0828e-02],\n",
       "                        [-3.8067e-02, -1.7958e-02,  4.1211e-04]],\n",
       "              \n",
       "                       [[ 5.9085e-03,  8.6192e-05,  1.0912e-02],\n",
       "                        [-1.4392e-03, -3.2997e-02, -3.9475e-02],\n",
       "                        [ 2.5778e-03, -5.8607e-03,  3.4386e-02]],\n",
       "              \n",
       "                       [[ 1.0807e-02, -1.7586e-02, -8.0085e-03],\n",
       "                        [ 1.2386e-02, -3.2924e-02,  1.0812e-02],\n",
       "                        [ 1.5895e-02,  2.6072e-02,  7.3970e-03]]],\n",
       "              \n",
       "              \n",
       "                      [[[ 1.3393e-02, -2.6660e-02, -1.1715e-03],\n",
       "                        [ 4.0931e-02,  3.4975e-02, -1.4988e-02],\n",
       "                        [-1.0204e-02, -4.8366e-03,  8.6326e-03]],\n",
       "              \n",
       "                       [[ 7.6494e-03, -3.2649e-02, -1.2755e-02],\n",
       "                        [ 1.9177e-02, -2.0655e-02, -2.7161e-02],\n",
       "                        [ 3.5448e-02, -1.4190e-02,  2.1822e-02]],\n",
       "              \n",
       "                       [[-2.7162e-02, -3.7480e-05,  2.8627e-02],\n",
       "                        [ 1.3549e-02,  4.0236e-02,  1.7986e-02],\n",
       "                        [-2.1149e-02,  5.8867e-03,  2.5015e-02]],\n",
       "              \n",
       "                       ...,\n",
       "              \n",
       "                       [[ 4.1268e-02, -2.7705e-02,  1.2054e-02],\n",
       "                        [-1.9053e-02,  7.7160e-03, -1.8750e-02],\n",
       "                        [-3.9877e-02, -3.9213e-02,  1.8597e-02]],\n",
       "              \n",
       "                       [[-3.7659e-03, -2.5411e-02, -2.7046e-02],\n",
       "                        [-4.9948e-03,  2.5128e-02,  3.1534e-02],\n",
       "                        [-1.1754e-02,  1.0869e-02, -2.6083e-02]],\n",
       "              \n",
       "                       [[-2.8906e-02,  3.1032e-02, -9.5877e-03],\n",
       "                        [-3.1660e-02,  3.9178e-02,  1.1523e-02],\n",
       "                        [-2.4797e-02, -3.2070e-02, -2.1566e-02]]]])),\n",
       "             ('layer5.0.bias',\n",
       "              tensor([-0.0064,  0.0064,  0.0015, -0.0302, -0.0038,  0.0208, -0.0206, -0.0210,\n",
       "                       0.0092, -0.0213, -0.0004, -0.0062, -0.0211,  0.0280,  0.0294,  0.0283,\n",
       "                       0.0060,  0.0288,  0.0330, -0.0084,  0.0081, -0.0228, -0.0193, -0.0352,\n",
       "                      -0.0369,  0.0380, -0.0272,  0.0352, -0.0178, -0.0395,  0.0300,  0.0362,\n",
       "                       0.0191, -0.0292,  0.0202, -0.0308,  0.0229,  0.0274,  0.0222,  0.0128,\n",
       "                      -0.0194,  0.0146,  0.0180, -0.0014, -0.0299,  0.0269,  0.0201, -0.0344,\n",
       "                      -0.0064, -0.0196, -0.0102,  0.0057,  0.0195,  0.0020,  0.0388, -0.0271,\n",
       "                       0.0107,  0.0368, -0.0346,  0.0416,  0.0352,  0.0110, -0.0404, -0.0317])),\n",
       "             ('layer5.1.weight',\n",
       "              tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])),\n",
       "             ('layer5.1.bias',\n",
       "              tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "                      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "                      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])),\n",
       "             ('layer5.1.running_mean',\n",
       "              tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "                      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
       "                      0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])),\n",
       "             ('layer5.1.running_var',\n",
       "              tensor([1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1., 1.,\n",
       "                      1., 1., 1., 1., 1., 1., 1., 1., 1., 1.])),\n",
       "             ('layer5.1.num_batches_tracked', tensor(0)),\n",
       "             ('fc.0.weight',\n",
       "              tensor([[-0.0074,  0.0003, -0.0281,  ...,  0.0123, -0.0207,  0.0121],\n",
       "                      [ 0.0107, -0.0143, -0.0056,  ..., -0.0232, -0.0051,  0.0067],\n",
       "                      [-0.0274,  0.0081, -0.0260,  ..., -0.0010, -0.0017, -0.0014],\n",
       "                      ...,\n",
       "                      [ 0.0091,  0.0101, -0.0196,  ...,  0.0153, -0.0081,  0.0171],\n",
       "                      [ 0.0072, -0.0126,  0.0059,  ..., -0.0173,  0.0092, -0.0056],\n",
       "                      [-0.0311,  0.0147, -0.0266,  ..., -0.0234,  0.0052,  0.0283]])),\n",
       "             ('fc.0.bias',\n",
       "              tensor([-0.0201,  0.0116, -0.0102, -0.0155, -0.0142,  0.0006,  0.0259,  0.0265,\n",
       "                      -0.0211,  0.0230,  0.0022, -0.0127,  0.0227,  0.0177,  0.0145, -0.0259,\n",
       "                       0.0151,  0.0083, -0.0173,  0.0243, -0.0040, -0.0029,  0.0161,  0.0097,\n",
       "                       0.0276, -0.0105,  0.0117, -0.0088, -0.0088, -0.0222,  0.0145, -0.0239,\n",
       "                       0.0152, -0.0145, -0.0141, -0.0185, -0.0003,  0.0274,  0.0039, -0.0289,\n",
       "                       0.0127,  0.0012, -0.0045,  0.0123, -0.0016, -0.0291,  0.0196,  0.0122,\n",
       "                       0.0023, -0.0069, -0.0292,  0.0133, -0.0295, -0.0051,  0.0295, -0.0076,\n",
       "                       0.0233,  0.0217, -0.0129,  0.0276,  0.0246,  0.0194, -0.0197, -0.0025,\n",
       "                       0.0199, -0.0233, -0.0096, -0.0079,  0.0102,  0.0043,  0.0231, -0.0216,\n",
       "                      -0.0144, -0.0150, -0.0269, -0.0299,  0.0106,  0.0285, -0.0032, -0.0281,\n",
       "                      -0.0115, -0.0300,  0.0102, -0.0307,  0.0202,  0.0064,  0.0236, -0.0006,\n",
       "                       0.0171, -0.0059,  0.0146, -0.0150,  0.0156, -0.0238, -0.0222,  0.0122,\n",
       "                       0.0113, -0.0155, -0.0067, -0.0295, -0.0222,  0.0177, -0.0233,  0.0091,\n",
       "                      -0.0109,  0.0227, -0.0149,  0.0197, -0.0136,  0.0202, -0.0215, -0.0182,\n",
       "                       0.0258, -0.0283, -0.0075, -0.0070, -0.0204,  0.0298, -0.0268,  0.0097,\n",
       "                      -0.0061,  0.0004,  0.0255,  0.0091,  0.0087,  0.0140,  0.0195, -0.0011])),\n",
       "             ('fc.2.weight',\n",
       "              tensor([[ 0.0374, -0.0863, -0.0873,  ...,  0.0760,  0.0251, -0.0321],\n",
       "                      [ 0.0661, -0.0857, -0.0273,  ..., -0.0617,  0.0122, -0.0316],\n",
       "                      [ 0.0030,  0.0870, -0.0500,  ..., -0.0037,  0.0466,  0.0826],\n",
       "                      ...,\n",
       "                      [ 0.0471, -0.0253,  0.0603,  ..., -0.0559, -0.0542,  0.0424],\n",
       "                      [-0.0691,  0.0531,  0.0187,  ...,  0.0517,  0.0754,  0.0617],\n",
       "                      [ 0.0737,  0.0523,  0.0355,  ...,  0.0830, -0.0559,  0.0852]])),\n",
       "             ('fc.2.bias',\n",
       "              tensor([-2.8968e-02,  1.2744e-02, -8.0789e-02, -8.6504e-03, -4.3614e-02,\n",
       "                      -6.7963e-02, -2.6265e-02,  8.6320e-02, -8.5787e-02,  7.7034e-02,\n",
       "                       5.1785e-02,  5.6798e-02, -4.5426e-02, -3.2280e-02, -1.0917e-02,\n",
       "                      -3.5334e-02, -1.4242e-02, -7.8218e-02,  1.9920e-02, -1.8090e-02,\n",
       "                      -4.3435e-02,  6.0330e-02,  8.2602e-02,  1.3896e-02,  4.2504e-02,\n",
       "                      -1.1486e-02,  3.8220e-03, -3.9833e-02, -6.4289e-03,  8.5940e-02,\n",
       "                       8.5527e-02, -4.8563e-02, -1.0747e-02,  7.1216e-02,  6.7314e-03,\n",
       "                      -3.6542e-02,  5.7631e-02,  5.1847e-03,  3.8497e-02, -4.9624e-02,\n",
       "                      -7.5231e-02,  8.0398e-02, -1.4195e-02, -7.5784e-02,  2.2772e-02,\n",
       "                       7.2567e-02,  6.2257e-02,  8.4891e-02,  6.1964e-02, -5.2140e-02,\n",
       "                       8.0010e-02,  2.7611e-02, -9.1882e-03,  3.9452e-02, -8.8153e-02,\n",
       "                      -7.1557e-02,  3.9445e-02, -1.8670e-02,  4.1279e-02,  5.7784e-02,\n",
       "                       2.8718e-02, -1.8999e-02, -6.9838e-02,  6.7003e-02, -3.2435e-02,\n",
       "                       6.8628e-02,  3.7240e-02, -3.1394e-02,  2.9532e-02, -3.9140e-02,\n",
       "                       3.1751e-02,  6.4839e-02, -2.8051e-02, -1.9575e-02,  5.2485e-02,\n",
       "                      -4.4802e-02,  6.8132e-02, -2.1594e-02, -5.9426e-02,  6.8279e-02,\n",
       "                      -5.9269e-03, -3.2284e-02, -9.0571e-04, -8.0913e-03, -6.2035e-02,\n",
       "                      -6.1806e-02,  4.4080e-02,  8.3760e-02,  7.2072e-02,  6.5077e-02,\n",
       "                      -2.9292e-02,  7.9173e-02, -7.1503e-02,  7.0132e-02, -2.9921e-02,\n",
       "                       8.8820e-03,  1.6074e-02,  7.9584e-02, -7.5146e-02,  6.6922e-02,\n",
       "                       3.4862e-02, -6.0052e-02, -3.4455e-02,  4.0803e-02, -2.4849e-02,\n",
       "                      -2.7359e-02,  3.5782e-02,  5.5879e-05,  5.8268e-03,  4.7860e-02,\n",
       "                       1.5403e-02,  7.4536e-02,  1.3824e-02,  2.8323e-02, -8.0690e-02,\n",
       "                      -4.9072e-03, -2.3598e-02, -5.4021e-02,  4.9374e-02,  3.5918e-02,\n",
       "                      -6.2706e-02, -8.7390e-02,  7.8352e-02, -7.1276e-02,  2.2550e-02,\n",
       "                      -6.5235e-02,  5.3665e-02, -7.9888e-03])),\n",
       "             ('fc.4.weight',\n",
       "              tensor([[ 0.0341,  0.0724,  0.0137,  ..., -0.0544, -0.0375,  0.0456],\n",
       "                      [ 0.0138,  0.0560, -0.0312,  ..., -0.0740, -0.0189, -0.0734],\n",
       "                      [-0.0540,  0.0229,  0.0061,  ...,  0.0650, -0.0264, -0.0369],\n",
       "                      ...,\n",
       "                      [-0.0631,  0.0428,  0.0611,  ...,  0.0845, -0.0734,  0.0217],\n",
       "                      [-0.0030,  0.0795, -0.0263,  ..., -0.0340, -0.0630, -0.0741],\n",
       "                      [-0.0084,  0.0058, -0.0212,  ..., -0.0095,  0.0754, -0.0827]])),\n",
       "             ('fc.4.bias',\n",
       "              tensor([-0.0517, -0.0260, -0.0650,  0.0776,  0.0784, -0.0497, -0.0204,  0.0477,\n",
       "                       0.0636, -0.0248, -0.0325, -0.0061, -0.0215,  0.0757]))])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "m1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f96f4f0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "w1 = []\n",
    "w2 = []\n",
    "w3 = []\n",
    "#Iterate over all keys in the state dictionary\n",
    "for key in m1:\n",
    "    tensor = m1[key]\n",
    "    # Iterate over all elements of the tensor\n",
    "    for i in range(tensor.numel()):\n",
    "        w1.append(int((tensor.view(-1)[i]+1)*100000))\n",
    "        \n",
    "#Iterate over all keys in the state dictionary\n",
    "for key in m2:\n",
    "    tensor = m2[key]\n",
    "    # Iterate over all elements of the tensor\n",
    "    for i in range(tensor.numel()):\n",
    "        w2.append(int((tensor.view(-1)[i]+1)* 100000))\n",
    "# Iterate over all keys in the state dictionary\n",
    "for key in m3:\n",
    "    tensor = m3[key]\n",
    "    # Iterate over all elements of the tensor\n",
    "    for i in range(tensor.numel()):\n",
    "        w3.append(int((tensor.view(-1)[i]+1)* 100000)) \n",
    "        #w3.append(int(tensor.view(-1)[i] ))  \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "02ae4186",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[97416,\n",
       " 99057,\n",
       " 100864,\n",
       " 117795,\n",
       " 123071,\n",
       " 67241,\n",
       " 115638,\n",
       " 86813,\n",
       " 81032,\n",
       " 122441,\n",
       " 116741,\n",
       " 88158,\n",
       " 103626,\n",
       " 107341,\n",
       " 110727,\n",
       " 86619,\n",
       " 102145,\n",
       " 68827,\n",
       " 74472,\n",
       " 95686,\n",
       " 98452,\n",
       " 80737,\n",
       " 79521,\n",
       " 84482,\n",
       " 130734,\n",
       " 67699,\n",
       " 92077,\n",
       " 106772,\n",
       " 126833,\n",
       " 75597,\n",
       " 101310,\n",
       " 100706,\n",
       " 105209,\n",
       " 130709,\n",
       " 101178,\n",
       " 133072,\n",
       " 127753,\n",
       " 96663,\n",
       " 84203,\n",
       " 69986,\n",
       " 97257,\n",
       " 116014,\n",
       " 79287,\n",
       " 89068,\n",
       " 104233,\n",
       " 126473,\n",
       " 81773,\n",
       " 116135,\n",
       " 120188,\n",
       " 111553,\n",
       " 101014,\n",
       " 102381,\n",
       " 81043,\n",
       " 90386,\n",
       " 119911,\n",
       " 84596,\n",
       " 79696,\n",
       " 71369,\n",
       " 115225,\n",
       " 82211,\n",
       " 129642,\n",
       " 128605,\n",
       " 80364,\n",
       " 87029,\n",
       " 86745,\n",
       " 91683,\n",
       " 113743,\n",
       " 87543,\n",
       " 125790,\n",
       " 75669,\n",
       " 133099,\n",
       " 123544,\n",
       " 106681,\n",
       " 72203,\n",
       " 86808,\n",
       " 111877,\n",
       " 115607,\n",
       " 114923,\n",
       " 75971,\n",
       " 84518,\n",
       " 74444,\n",
       " 126887,\n",
       " 89052,\n",
       " 114620,\n",
       " 110346,\n",
       " 110085,\n",
       " 118795,\n",
       " 110180,\n",
       " 83396,\n",
       " 95801,\n",
       " 109083,\n",
       " 116483,\n",
       " 123628,\n",
       " 124575,\n",
       " 80413,\n",
       " 71246,\n",
       " 85475,\n",
       " 72531,\n",
       " 78717,\n",
       " 70877,\n",
       " 87880,\n",
       " 82081,\n",
       " 120443,\n",
       " 93294,\n",
       " 75970,\n",
       " 107831,\n",
       " 104112,\n",
       " 105377,\n",
       " 73419,\n",
       " 112724,\n",
       " 107381,\n",
       " 120017,\n",
       " 95835,\n",
       " 113528,\n",
       " 84692,\n",
       " 95409,\n",
       " 99730,\n",
       " 66925,\n",
       " 95577,\n",
       " 121569,\n",
       " 86859,\n",
       " 109157,\n",
       " 81233,\n",
       " 99333,\n",
       " 126857,\n",
       " 90743,\n",
       " 116515,\n",
       " 101670,\n",
       " 92636,\n",
       " 118636,\n",
       " 125066,\n",
       " 93853,\n",
       " 84354,\n",
       " 83017,\n",
       " 108093,\n",
       " 69279,\n",
       " 108907,\n",
       " 98655,\n",
       " 111991,\n",
       " 70367,\n",
       " 82968,\n",
       " 88872,\n",
       " 103071,\n",
       " 67623,\n",
       " 91024,\n",
       " 70266,\n",
       " 114197,\n",
       " 125691,\n",
       " 116326,\n",
       " 130166,\n",
       " 96884,\n",
       " 96864,\n",
       " 68887,\n",
       " 126397,\n",
       " 130734,\n",
       " 108265,\n",
       " 100600,\n",
       " 97914,\n",
       " 124893,\n",
       " 121538,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 100000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 200000,\n",
       " 100000,\n",
       " 96185,\n",
       " 106579,\n",
       " 106400,\n",
       " 91971,\n",
       " 98181,\n",
       " 99489,\n",
       " 104328,\n",
       " 96087,\n",
       " 98206,\n",
       " 105053,\n",
       " 96753,\n",
       " 95292,\n",
       " 95663,\n",
       " 103266,\n",
       " 91972,\n",
       " 97955,\n",
       " 92522,\n",
       " 105788,\n",
       " 99392,\n",
       " 95170,\n",
       " 95315,\n",
       " 98644,\n",
       " 101540,\n",
       " 91812,\n",
       " 102519,\n",
       " 106212,\n",
       " 106840,\n",
       " 107681,\n",
       " 93611,\n",
       " 97311,\n",
       " 101907,\n",
       " 107510,\n",
       " 97407,\n",
       " 97655,\n",
       " 102892,\n",
       " 94145,\n",
       " 104986,\n",
       " 104196,\n",
       " 92612,\n",
       " 101555,\n",
       " 97562,\n",
       " 102757,\n",
       " 99922,\n",
       " 94368,\n",
       " 93508,\n",
       " 99645,\n",
       " 97344,\n",
       " 96791,\n",
       " 94550,\n",
       " 106562,\n",
       " 96408,\n",
       " 95005,\n",
       " 107421,\n",
       " 97733,\n",
       " 97213,\n",
       " 99704,\n",
       " 100765,\n",
       " 97882,\n",
       " 92333,\n",
       " 96561,\n",
       " 96554,\n",
       " 93862,\n",
       " 107221,\n",
       " 95229,\n",
       " 96089,\n",
       " 98332,\n",
       " 101497,\n",
       " 101613,\n",
       " 92348,\n",
       " 100255,\n",
       " 93506,\n",
       " 97379,\n",
       " 106918,\n",
       " 106559,\n",
       " 92326,\n",
       " 99210,\n",
       " 101518,\n",
       " 105998,\n",
       " 93634,\n",
       " 99946,\n",
       " 103665,\n",
       " 97048,\n",
       " 97393,\n",
       " 103150,\n",
       " 103553,\n",
       " 105839,\n",
       " 100418,\n",
       " 98879,\n",
       " 96211,\n",
       " 100339,\n",
       " 104791,\n",
       " 97653,\n",
       " 94056,\n",
       " 102375,\n",
       " 100514,\n",
       " 100666,\n",
       " 103645,\n",
       " 94771,\n",
       " 106322,\n",
       " 106568,\n",
       " 104749,\n",
       " 97910,\n",
       " 104172,\n",
       " 95406,\n",
       " 106752,\n",
       " 99168,\n",
       " 92548,\n",
       " 98837,\n",
       " 95629,\n",
       " 99236,\n",
       " 96752,\n",
       " 107193,\n",
       " 92188,\n",
       " 103459,\n",
       " 95127,\n",
       " 91828,\n",
       " 99405,\n",
       " 103284,\n",
       " 95767,\n",
       " 94264,\n",
       " 108311,\n",
       " 97499,\n",
       " 96202,\n",
       " 106132,\n",
       " 100010,\n",
       " 99885,\n",
       " 107697,\n",
       " 94364,\n",
       " 96460,\n",
       " 104935,\n",
       " 103463,\n",
       " 100833,\n",
       " 108145,\n",
       " 94236,\n",
       " 102212,\n",
       " 96741,\n",
       " 107561,\n",
       " 97201,\n",
       " 94112,\n",
       " 107708,\n",
       " 97078,\n",
       " 101726,\n",
       " 105278,\n",
       " 106632,\n",
       " 97528,\n",
       " 98599,\n",
       " 92056,\n",
       " 106531,\n",
       " 102079,\n",
       " 101519,\n",
       " 101631,\n",
       " 101286,\n",
       " 98961,\n",
       " 105988,\n",
       " 108165,\n",
       " 98267,\n",
       " 98856,\n",
       " 93015,\n",
       " 101647,\n",
       " 96475,\n",
       " 106805,\n",
       " 98716,\n",
       " 101973,\n",
       " 92166,\n",
       " 101613,\n",
       " 95995,\n",
       " 93662,\n",
       " 91744,\n",
       " 99360,\n",
       " 103268,\n",
       " 103715,\n",
       " 96448,\n",
       " 104015,\n",
       " 105648,\n",
       " 97921,\n",
       " 102483,\n",
       " 93650,\n",
       " 99654,\n",
       " 95230,\n",
       " 103719,\n",
       " 94947,\n",
       " 95847,\n",
       " 97394,\n",
       " 107439,\n",
       " 96473,\n",
       " 106788,\n",
       " 102613,\n",
       " 92011,\n",
       " 101207,\n",
       " 104723,\n",
       " 97804,\n",
       " 92240,\n",
       " 104331,\n",
       " 105026,\n",
       " 97299,\n",
       " 107925,\n",
       " 107092,\n",
       " 91949,\n",
       " 103203,\n",
       " 97399,\n",
       " 96939,\n",
       " 99657,\n",
       " 100421,\n",
       " 93387,\n",
       " 103077,\n",
       " 97187,\n",
       " 104589,\n",
       " 105403,\n",
       " 99281,\n",
       " 95744,\n",
       " 103247,\n",
       " 106742,\n",
       " 96573,\n",
       " 96665,\n",
       " 102768,\n",
       " 98061,\n",
       " 93778,\n",
       " 92712,\n",
       " 106898,\n",
       " 107968,\n",
       " 93517,\n",
       " 95893,\n",
       " 106472,\n",
       " 104780,\n",
       " 99472,\n",
       " 96104,\n",
       " 101311,\n",
       " 107931,\n",
       " 106546,\n",
       " 93771,\n",
       " 97591,\n",
       " 96411,\n",
       " 101306,\n",
       " 93249,\n",
       " 101590,\n",
       " 97103,\n",
       " 103425,\n",
       " 102734,\n",
       " 107778,\n",
       " 107282,\n",
       " 96568,\n",
       " 97520,\n",
       " 94542,\n",
       " 96717,\n",
       " 98830,\n",
       " 94236,\n",
       " 92654,\n",
       " 104562,\n",
       " 99348,\n",
       " 106974,\n",
       " 97504,\n",
       " 104561,\n",
       " 103941,\n",
       " 105305,\n",
       " 104776,\n",
       " 99483,\n",
       " 95453,\n",
       " 95020,\n",
       " 95963,\n",
       " 93651,\n",
       " 103819,\n",
       " 102847,\n",
       " 94239,\n",
       " 93251,\n",
       " 107111,\n",
       " 100439,\n",
       " 99364,\n",
       " 95027,\n",
       " 105506,\n",
       " 106658,\n",
       " 94309,\n",
       " 94472,\n",
       " 95672,\n",
       " 103497,\n",
       " 99481,\n",
       " 100873,\n",
       " 108012,\n",
       " 107477,\n",
       " 106466,\n",
       " 98710,\n",
       " 99993,\n",
       " 105642,\n",
       " 94226,\n",
       " 93367,\n",
       " 100340,\n",
       " 104638,\n",
       " 94695,\n",
       " 105914,\n",
       " 108235,\n",
       " 104629,\n",
       " 96250,\n",
       " 99894,\n",
       " 104360,\n",
       " 96869,\n",
       " 94563,\n",
       " 99770,\n",
       " 93632,\n",
       " 102089,\n",
       " 107977,\n",
       " 99806,\n",
       " 101363,\n",
       " 105135,\n",
       " 98121,\n",
       " 98884,\n",
       " 94007,\n",
       " 97521,\n",
       " 96337,\n",
       " 105521,\n",
       " 93032,\n",
       " 106289,\n",
       " 102724,\n",
       " 102765,\n",
       " 96639,\n",
       " 106131,\n",
       " 106901,\n",
       " 107616,\n",
       " 102868,\n",
       " 96237,\n",
       " 94439,\n",
       " 93338,\n",
       " 93945,\n",
       " 107921,\n",
       " 99662,\n",
       " 100730,\n",
       " 102141,\n",
       " 93994,\n",
       " 104112,\n",
       " 105585,\n",
       " 102807,\n",
       " 99135,\n",
       " 108126,\n",
       " 94383,\n",
       " 92781,\n",
       " 92906,\n",
       " 97573,\n",
       " 94246,\n",
       " 105741,\n",
       " 98839,\n",
       " 99658,\n",
       " 105638,\n",
       " 104513,\n",
       " 101108,\n",
       " 94857,\n",
       " 97204,\n",
       " 99269,\n",
       " 106439,\n",
       " 94367,\n",
       " 101827,\n",
       " 100391,\n",
       " 107397,\n",
       " 103799,\n",
       " 98560,\n",
       " 105804,\n",
       " 102207,\n",
       " 105540,\n",
       " 97648,\n",
       " 104126,\n",
       " 97760,\n",
       " 105352,\n",
       " 106768,\n",
       " 106558,\n",
       " 103751,\n",
       " 92701,\n",
       " 99376,\n",
       " 98629,\n",
       " 96419,\n",
       " 106265,\n",
       " 95635,\n",
       " 98333,\n",
       " 101896,\n",
       " 98718,\n",
       " 92123,\n",
       " 101246,\n",
       " 106267,\n",
       " 100686,\n",
       " 97811,\n",
       " 108200,\n",
       " 107124,\n",
       " 94618,\n",
       " 104509,\n",
       " 106241,\n",
       " 94817,\n",
       " 92978,\n",
       " 103726,\n",
       " 102020,\n",
       " 105506,\n",
       " 93255,\n",
       " 104069,\n",
       " 98000,\n",
       " 95835,\n",
       " 96859,\n",
       " 106549,\n",
       " 106370,\n",
       " 94953,\n",
       " 105976,\n",
       " 98217,\n",
       " 108299,\n",
       " 104077,\n",
       " 101154,\n",
       " 95841,\n",
       " 95926,\n",
       " 102447,\n",
       " 94469,\n",
       " 104573,\n",
       " 106095,\n",
       " 103194,\n",
       " 103689,\n",
       " 104948,\n",
       " 104141,\n",
       " 98035,\n",
       " 94696,\n",
       " 103241,\n",
       " 92513,\n",
       " 91889,\n",
       " 95745,\n",
       " 102315,\n",
       " 103983,\n",
       " 96193,\n",
       " 105188,\n",
       " 93763,\n",
       " 93875,\n",
       " 93347,\n",
       " 101726,\n",
       " 96291,\n",
       " 94220,\n",
       " 106799,\n",
       " 107591,\n",
       " 100699,\n",
       " 100976,\n",
       " 95714,\n",
       " 105555,\n",
       " 102598,\n",
       " 106525,\n",
       " 96275,\n",
       " 95991,\n",
       " 95921,\n",
       " 107907,\n",
       " 95704,\n",
       " 103482,\n",
       " 96515,\n",
       " 100538,\n",
       " 92817,\n",
       " 102965,\n",
       " 98203,\n",
       " 106703,\n",
       " 102249,\n",
       " 106921,\n",
       " 102713,\n",
       " 92569,\n",
       " 105657,\n",
       " 106310,\n",
       " 98880,\n",
       " 102664,\n",
       " 105704,\n",
       " 95031,\n",
       " 92928,\n",
       " 92957,\n",
       " 94422,\n",
       " 95688,\n",
       " 94173,\n",
       " 97656,\n",
       " 93076,\n",
       " 97661,\n",
       " 92785,\n",
       " 97314,\n",
       " 102050,\n",
       " 96302,\n",
       " 98426,\n",
       " 99966,\n",
       " 102579,\n",
       " 108248,\n",
       " 103164,\n",
       " 100842,\n",
       " 107315,\n",
       " 105618,\n",
       " 106247,\n",
       " 105370,\n",
       " 92532,\n",
       " 98383,\n",
       " 95851,\n",
       " 103262,\n",
       " 100384,\n",
       " 97296,\n",
       " 93709,\n",
       " 95548,\n",
       " 92264,\n",
       " 103060,\n",
       " 106281,\n",
       " 97991,\n",
       " 104150,\n",
       " 91789,\n",
       " 94988,\n",
       " 92381,\n",
       " 103259,\n",
       " 101902,\n",
       " 92983,\n",
       " 97716,\n",
       " 97262,\n",
       " 97907,\n",
       " 98728,\n",
       " 100050,\n",
       " 103527,\n",
       " 101821,\n",
       " 99229,\n",
       " 100579,\n",
       " 91805,\n",
       " 106864,\n",
       " 101360,\n",
       " 103656,\n",
       " 100194,\n",
       " 97262,\n",
       " 99191,\n",
       " 100961,\n",
       " 106593,\n",
       " 103769,\n",
       " 100395,\n",
       " 104535,\n",
       " 95351,\n",
       " 92384,\n",
       " 92150,\n",
       " 103031,\n",
       " 92790,\n",
       " 99226,\n",
       " 107930,\n",
       " 104228,\n",
       " 103642,\n",
       " 98812,\n",
       " 101997,\n",
       " 100496,\n",
       " 105405,\n",
       " 101800,\n",
       " 94575,\n",
       " 98917,\n",
       " 98081,\n",
       " 105187,\n",
       " 96139,\n",
       " 98359,\n",
       " 97477,\n",
       " 91954,\n",
       " 102986,\n",
       " 100052,\n",
       " 100981,\n",
       " 102845,\n",
       " 98649,\n",
       " 94807,\n",
       " 93425,\n",
       " 105702,\n",
       " 92427,\n",
       " 102778,\n",
       " 91845,\n",
       " 104361,\n",
       " 96780,\n",
       " 104159,\n",
       " 94285,\n",
       " 91696,\n",
       " 100968,\n",
       " 97357,\n",
       " 103454,\n",
       " 94339,\n",
       " 93175,\n",
       " 105385,\n",
       " 102156,\n",
       " 102934,\n",
       " 101624,\n",
       " 102146,\n",
       " 103831,\n",
       " 101108,\n",
       " 103745,\n",
       " 96979,\n",
       " 92372,\n",
       " 94024,\n",
       " 96381,\n",
       " 102329,\n",
       " 97521,\n",
       " 96915,\n",
       " 100639,\n",
       " 98283,\n",
       " 94395,\n",
       " 92987,\n",
       " 106644,\n",
       " 93270,\n",
       " 100413,\n",
       " 96046,\n",
       " 93466,\n",
       " 99424,\n",
       " 100512,\n",
       " 93903,\n",
       " 96890,\n",
       " 91884,\n",
       " 92914,\n",
       " 93125,\n",
       " 94073,\n",
       " 97659,\n",
       " 107131,\n",
       " 103910,\n",
       " 93979,\n",
       " 98720,\n",
       " 100257,\n",
       " 97656,\n",
       " 96737,\n",
       " 103199,\n",
       " 96518,\n",
       " 95488,\n",
       " 100080,\n",
       " 96635,\n",
       " 106607,\n",
       " 104568,\n",
       " 98462,\n",
       " 101157,\n",
       " 107371,\n",
       " 97977,\n",
       " 93776,\n",
       " 93984,\n",
       " 94014,\n",
       " 96248,\n",
       " 98928,\n",
       " 102818,\n",
       " 99741,\n",
       " 93857,\n",
       " 93770,\n",
       " 106914,\n",
       " 102414,\n",
       " 104235,\n",
       " 105835,\n",
       " 99982,\n",
       " 92058,\n",
       " 103291,\n",
       " 106058,\n",
       " 101653,\n",
       " 105725,\n",
       " 99283,\n",
       " 97945,\n",
       " 101147,\n",
       " 96794,\n",
       " 101636,\n",
       " 99219,\n",
       " 107673,\n",
       " 92139,\n",
       " 92819,\n",
       " 101690,\n",
       " 93061,\n",
       " 106578,\n",
       " 93377,\n",
       " 107112,\n",
       " 103782,\n",
       " 93995,\n",
       " 99347,\n",
       " 107527,\n",
       " 105119,\n",
       " 97983,\n",
       " 104764,\n",
       " 91761,\n",
       " 102773,\n",
       " 92671,\n",
       " 106445,\n",
       " 105565,\n",
       " 106706,\n",
       " 104674,\n",
       " 93642,\n",
       " 92848,\n",
       " 92023,\n",
       " 98532,\n",
       " 93795,\n",
       " 103796,\n",
       " 97616,\n",
       " 97566,\n",
       " 101034,\n",
       " 104977,\n",
       " 92193,\n",
       " 100552,\n",
       " 106041,\n",
       " 103548,\n",
       " 91939,\n",
       " 100379,\n",
       " 103542,\n",
       " 108149,\n",
       " 103233,\n",
       " 100596,\n",
       " 94953,\n",
       " 92974,\n",
       " 106716,\n",
       " 98239,\n",
       " 103949,\n",
       " 108003,\n",
       " 92220,\n",
       " 97526,\n",
       " 99532,\n",
       " 93077,\n",
       " 108202,\n",
       " 100925,\n",
       " 101968,\n",
       " 92641,\n",
       " 107282,\n",
       " 98320,\n",
       " 104553,\n",
       " 102079,\n",
       " 96430,\n",
       " 94380,\n",
       " 91900,\n",
       " 106272,\n",
       " 98314,\n",
       " 96718,\n",
       " 92729,\n",
       " 107680,\n",
       " 105800,\n",
       " 96731,\n",
       " 104661,\n",
       " 101946,\n",
       " 94479,\n",
       " 101709,\n",
       " 100257,\n",
       " 102451,\n",
       " 99939,\n",
       " 98964,\n",
       " 106665,\n",
       " 92193,\n",
       " 102103,\n",
       " 105612,\n",
       " 102087,\n",
       " 99415,\n",
       " 91723,\n",
       " 99376,\n",
       " 91880,\n",
       " 105927,\n",
       " 106416,\n",
       " 105872,\n",
       " 93806,\n",
       " 102071,\n",
       " 104845,\n",
       " 104582,\n",
       " 96627,\n",
       " 95511,\n",
       " 97972,\n",
       " 107508,\n",
       " 99089,\n",
       " 95883,\n",
       " 108104,\n",
       " 94967,\n",
       " 101663,\n",
       " 106699,\n",
       " 107698,\n",
       " 107064,\n",
       " 100827,\n",
       " 95747,\n",
       " 104871,\n",
       " 105883,\n",
       " 107715,\n",
       " 102374,\n",
       " 92362,\n",
       " 98606,\n",
       " 92411,\n",
       " 96906,\n",
       " 99542,\n",
       " 99790,\n",
       " 98316,\n",
       " 103342,\n",
       " 103034,\n",
       " 93381,\n",
       " 104378,\n",
       " 92462,\n",
       " 98059,\n",
       " 93417,\n",
       " 92804,\n",
       " 97271,\n",
       " 105754,\n",
       " 93998,\n",
       " 103522,\n",
       " 97985,\n",
       " 96523,\n",
       " 99386,\n",
       " 97408,\n",
       " 96444,\n",
       " 102649,\n",
       " 103321,\n",
       " 91901,\n",
       " ...]"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8d199876",
   "metadata": {},
   "outputs": [],
   "source": [
    "from dataclasses import dataclass\n",
    "import random\n",
    "\n",
    "inf = float(\"inf\")\n",
    "\n",
    "@dataclass\n",
    "class PrimeGaloisField:\n",
    "    prime: int\n",
    "\n",
    "    def __contains__(self, field_value: \"FieldElement\") -> bool:\n",
    "        # called whenever you do: <FieldElement> in <PrimeGaloisField>\n",
    "        return 0 <= field_value.value < self.prime\n",
    "    \n",
    "@dataclass\n",
    "class FieldElement:\n",
    "    value: int\n",
    "    field: PrimeGaloisField\n",
    "\n",
    "    def __repr__(self):\n",
    "        return \"0x\" + f\"{self.value:x}\".zfill(64)\n",
    "        \n",
    "    @property\n",
    "    def P(self) -> int:\n",
    "        return self.field.prime\n",
    "    \n",
    "    def __add__(self, other: \"FieldElement\") -> \"FieldElement\":\n",
    "        return FieldElement(\n",
    "            value=(self.value + other.value) % self.P,\n",
    "            field=self.field\n",
    "        )\n",
    "    \n",
    "    def __sub__(self, other: \"FieldElement\") -> \"FieldElement\":\n",
    "        return FieldElement(\n",
    "            value=(self.value - other.value) % self.P,\n",
    "            field=self.field\n",
    "        )\n",
    "    def __rmul__(self, scalar: int) -> \"FieldValue\":\n",
    "        return FieldElement(\n",
    "            value=(abs(self.value) * scalar) % self.P,\n",
    "            field=self.field\n",
    "        )\n",
    "\n",
    "    def __mul__(self, other: \"FieldElement\") -> \"FieldElement\":\n",
    "        return FieldElement(\n",
    "            value=(self.value * other.value) % self.P,\n",
    "            field=self.field\n",
    "        )\n",
    "        \n",
    "    def __pow__(self, exponent: int) -> \"FieldElement\":\n",
    "        return FieldElement(\n",
    "            value=pow(self.value, exponent, self.P),\n",
    "            field=self.field\n",
    "        )\n",
    "\n",
    "    def __truediv__(self, other: \"FieldElement\") -> \"FieldElement\":\n",
    "        other_inv = other ** -1\n",
    "        return self * other_inv\n",
    "@dataclass\n",
    "class EllipticCurve:\n",
    "    a: int\n",
    "    b: int\n",
    "\n",
    "    field: PrimeGaloisField\n",
    "    \n",
    "    def __contains__(self, point: \"Point\") -> bool:\n",
    "        x, y = point.x, point.y\n",
    "        return y ** 2 == x ** 3 + self.a * x + self.b\n",
    "\n",
    "    def __post_init__(self):\n",
    "        # Encapsulate int parameters in FieldElement\n",
    "        self.a = FieldElement(self.a, self.field)\n",
    "        self.b = FieldElement(self.b, self.field)\n",
    "    \n",
    "        # Check for membership of curve parameters in the field.\n",
    "        if self.a not in self.field or self.b not in self.field:\n",
    "            raise ValueError\n",
    "\n",
    "@dataclass\n",
    "class Point:\n",
    "    x: int\n",
    "    y: int\n",
    "    \n",
    "    curve: EllipticCurve\n",
    "    \n",
    "    \n",
    "    def __post_init__(self):\n",
    "        # Ignore validation for I\n",
    "        if self.x is None and self.y is None:\n",
    "            return\n",
    "\n",
    "        # Encapsulate int coordinates in FieldElement\n",
    "        self.x = FieldElement(self.x, self.curve.field)\n",
    "        self.y = FieldElement(self.y, self.curve.field)\n",
    "\n",
    "        # Verify if the point satisfies the curve equation\n",
    "        if self not in self.curve:\n",
    "            raise ValueError         \n",
    "    def __add__(self, other):\n",
    "        #################################################################\n",
    "        # Point Addition for P₁ or P₂ = I   (identity)                  #\n",
    "        #                                                               #\n",
    "        # Formula:                                                      #\n",
    "        #     P + I = P                                                 #\n",
    "        #     I + P = P                                                 #\n",
    "        #################################################################\n",
    "        if self == I:\n",
    "            return other\n",
    "\n",
    "        if other == I:\n",
    "            return self\n",
    "\n",
    "        #################################################################\n",
    "        # Point Addition for X₁ = X₂   (additive inverse)               #\n",
    "        #                                                               #\n",
    "        # Formula:                                                      #\n",
    "        #     P + (-P) = I                                              #\n",
    "        #     (-P) + P = I                                              #\n",
    "        #################################################################\n",
    "        if self.x == other.x and self.y == (-1 * other.y):\n",
    "            return I\n",
    "\n",
    "        #################################################################\n",
    "        # Point Addition for X₁ ≠ X₂   (line with slope)                #\n",
    "        #                                                               #\n",
    "        # Formula:                                                      #\n",
    "        #     S = (Y₂ - Y₁) / (X₂ - X₁)                                 #\n",
    "        #     X₃ = S² - X₁ - X₂                                         #\n",
    "        #     Y₃ = S(X₁ - X₃) - Y₁                                      #\n",
    "        #################################################################\n",
    "        if self.x != other.x:\n",
    "            x1, x2 = self.x, other.x\n",
    "            y1, y2 = self.y, other.y\n",
    "\n",
    "            s = (y2 - y1) / (x2 - x1)\n",
    "            x3 = s ** 2 - x1 - x2\n",
    "            y3 = s * (x1 - x3) - y1\n",
    "\n",
    "            return self.__class__(\n",
    "                x=x3.value,\n",
    "                y=y3.value,\n",
    "                curve=curve256\n",
    "            )\n",
    "\n",
    "        #################################################################\n",
    "        # Point Addition for P₁ = P₂   (vertical tangent)               #\n",
    "        #                                                               #\n",
    "        # Formula:                                                      #\n",
    "        #     S = ∞                                                     #\n",
    "        #     (X₃, Y₃) = I                                              #\n",
    "        #################################################################\n",
    "        if self == other and self.y == inf:\n",
    "            return I\n",
    "\n",
    "        #################################################################\n",
    "        # Point Addition for P₁ = P₂   (tangent with slope)             #\n",
    "        #                                                               #\n",
    "        # Formula:                                                      #\n",
    "        #     S = (3X₁² + a) / 2Y₁         .. ∂(Y²) = ∂(X² + aX + b)    #\n",
    "        #     X₃ = S² - 2X₁                                             #\n",
    "        #     Y₃ = S(X₁ - X₃) - Y₁                                      #\n",
    "        #################################################################\n",
    "        if self == other:\n",
    "            x1, y1, a = self.x, self.y, self.curve.a\n",
    "\n",
    "            s = (3 * x1 ** 2 + a) / (2 * y1)\n",
    "            x3 = s ** 2 - 2 * x1\n",
    "            y3 = s * (x1 - x3) - y1\n",
    "\n",
    "            return self.__class__(\n",
    "                x=x3.value,\n",
    "                y=y3.value,\n",
    "                curve=curve256\n",
    "            )\n",
    "   \n",
    "\n",
    "    def __rmul__(self, scalar: int) -> \"Point\":\n",
    "        # Naive approach:\n",
    "        #\n",
    "        # result = I\n",
    "        # for _ in range(scalar):  # or range(scalar % N)\n",
    "        #     result = result + self\n",
    "        # return result\n",
    "        \n",
    "        # Optimized approach using binary expansion\n",
    "        current = self\n",
    "        result = I\n",
    "        while scalar:\n",
    "            if scalar & 1:  # same as scalar % 2\n",
    "                result = result + current\n",
    "            current = current + current  # point doubling\n",
    "            scalar >>= 1  # same as scalar / 2\n",
    "        return result\n",
    "#      def __neg__(self):\n",
    "#         if self == I:\n",
    "#             return self\n",
    "#         else:\n",
    "#             return Point(self.x.value, (-1 * self.y).value, self.curve)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "06c62955",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Parameters for the Elliptic Curve being used i.e y² = x³ + 2x + 2\n",
    "p:int=(0xffffffff00000001000000000000000000000000ffffffffffffffffffffffff)\n",
    "#p: int=(0x080000000000000000000000000000000000000000000000000000001)\n",
    "p=17\n",
    "field = PrimeGaloisField(p)\n",
    "A:int=(0xffffffff00000001000000000000000000000000fffffffffffffffffffffffc)\n",
    "B:int=(0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b)\n",
    "A=2\n",
    "B=2\n",
    "# A:int=(0x000000000000000000000000000000000000000000000000000000000001)\n",
    "# B:int=(0x00000000000000000000000000000000000000000000000000000000000c9)\n",
    "curve256 = EllipticCurve(A,B,field)\n",
    "I = Point(None,None,curve256)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "74d87c54",
   "metadata": {},
   "outputs": [],
   "source": [
    "# G(0,1)\n",
    "# gx =36863\n",
    "# gy =30618\n",
    "gx=5\n",
    "gy=1\n",
    "# gx:int=(0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798)\n",
    "# gy:int=(0x483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8)\n",
    "# gx:int=(0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296)\n",
    "# gy:int=(0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5)\n",
    "# gx:int=(0x02FE13C0537BBC11ACAA07D793DE4E6D5E5C94EEE8)\n",
    "# gy:int=(0x0289070FB05D38FF58321F2E800536D538CCDAA3D9)\n",
    "G = Point(gx,gy,curve256)\n",
    "# N = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\n",
    "N=0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551\n",
    "# N:int=(0x040000000000000000000292fe77e70c12a4234c33)\n",
    "#P(0,-1)\n",
    "# px:int=(0xdde26a69c791605d878e8479f5d24a11e833bca0a6269698d707affb38d310dd)\n",
    "# py:int=(0x1ddb215f6a285f2034ff7ac98f7623c477748c3b454343142c72af85bc1ee39e)\n",
    "# px:int=(0xf068f30fae22d8a2da9c9d29a6d90fe84354d1eec1ccc4880cf130d912d6eb75)\n",
    "# py:int=(0xfe74f9772f2f6044f5c67e230dda10a43f6520d76e5829240b623c9546f14f4b)\n",
    "# px=99747\n",
    "# py=472\n",
    "px=3\n",
    "py=1\n",
    "P = Point(px,py,curve256)\n",
    "# k = random.randint(1, p-1)\n",
    "# P = k * G\n",
    "# print(P)\n",
    "r1 = random.randint(1, p)\n",
    "r2 = random.randint(1, p)\n",
    "r3 = r1 + r2\n",
    "\n",
    "# nP = Point(px,(p-py)%p,curve256)\n",
    "#nG = Point(gx,(p-gy)%p,curve256)\n",
    "\n",
    "nP = Point(px,(p-py),curve256)\n",
    "nG = Point(gx,(p-gy),curve256)\n",
    "\n",
    "#print(\"NP\",np)\n",
    "R1 = r1 * P\n",
    "R2 = r2 * P \n",
    "R3 = r3 * nP\n",
    "#print(\"R:\",R1,R2,R3)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c98283c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "Z1 = []\n",
    "Z2 = []\n",
    "Z3 = []\n",
    "\n",
    "for i in range(100):\n",
    "    #print(w1)\n",
    "    Z1.append(abs(r1 + w1[i]) * G)\n",
    "    #print(Z1[i])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e395c60d",
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(100):\n",
    "    #print(w2[i])\n",
    "    Z2.append(abs(r2 + w2[i]) * G)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "28f357f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#nr = -r3 + w3\n",
    "nr = []\n",
    "for i in range(100):\n",
    "    nr.append(-r3+w3[i])\n",
    "    \n",
    "\n",
    "#Z3 = -nr * nG\n",
    "Z3 = []\n",
    "for i in range(100):\n",
    "    if nr[i]>0:\n",
    "        nr[i]=-nr[i]\n",
    "        Z3.append(-nr[i]* nG)\n",
    "    else:\n",
    "        Z3.append(-nr[i]* nG)\n",
    "  \n",
    "#Rsum\n",
    "Rsum = R1 + R2 + R3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2bbc4648",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Point(x=None, y=None, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Rsum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ec1f06b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000009, y=0x0000000000000000000000000000000000000000000000000000000000000010, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000000, y=0x0000000000000000000000000000000000000000000000000000000000000006, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000000, y=0x0000000000000000000000000000000000000000000000000000000000000006, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000006, y=0x0000000000000000000000000000000000000000000000000000000000000003, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x000000000000000000000000000000000000000000000000000000000000000d, y=0x0000000000000000000000000000000000000000000000000000000000000007, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000009, y=0x0000000000000000000000000000000000000000000000000000000000000001, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000005, y=0x0000000000000000000000000000000000000000000000000000000000000010, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=None, y=None, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000007, y=0x000000000000000000000000000000000000000000000000000000000000000b, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000000, y=0x0000000000000000000000000000000000000000000000000000000000000006, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x000000000000000000000000000000000000000000000000000000000000000a, y=0x0000000000000000000000000000000000000000000000000000000000000006, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000010, y=0x000000000000000000000000000000000000000000000000000000000000000d, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x000000000000000000000000000000000000000000000000000000000000000a, y=0x000000000000000000000000000000000000000000000000000000000000000b, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x000000000000000000000000000000000000000000000000000000000000000a, y=0x0000000000000000000000000000000000000000000000000000000000000006, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000000, y=0x0000000000000000000000000000000000000000000000000000000000000006, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x000000000000000000000000000000000000000000000000000000000000000a, y=0x000000000000000000000000000000000000000000000000000000000000000b, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x000000000000000000000000000000000000000000000000000000000000000d, y=0x0000000000000000000000000000000000000000000000000000000000000007, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000010, y=0x0000000000000000000000000000000000000000000000000000000000000004, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x000000000000000000000000000000000000000000000000000000000000000a, y=0x000000000000000000000000000000000000000000000000000000000000000b, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000010, y=0x000000000000000000000000000000000000000000000000000000000000000d, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000009, y=0x0000000000000000000000000000000000000000000000000000000000000001, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000009, y=0x0000000000000000000000000000000000000000000000000000000000000010, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000010, y=0x0000000000000000000000000000000000000000000000000000000000000004, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000006, y=0x0000000000000000000000000000000000000000000000000000000000000003, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000005, y=0x0000000000000000000000000000000000000000000000000000000000000010, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000007, y=0x000000000000000000000000000000000000000000000000000000000000000b, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x000000000000000000000000000000000000000000000000000000000000000a, y=0x000000000000000000000000000000000000000000000000000000000000000b, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x000000000000000000000000000000000000000000000000000000000000000d, y=0x000000000000000000000000000000000000000000000000000000000000000a, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000006, y=0x000000000000000000000000000000000000000000000000000000000000000e, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Reference point: \n",
      " Point(x=0x0000000000000000000000000000000000000000000000000000000000000007, y=0x000000000000000000000000000000000000000000000000000000000000000b, curve=EllipticCurve(a=0x0000000000000000000000000000000000000000000000000000000000000002, b=0x0000000000000000000000000000000000000000000000000000000000000002, field=PrimeGaloisField(prime=17)))\n",
      "\n",
      "\n",
      "Time taken: 0.012965679168701172\n"
     ]
    }
   ],
   "source": [
    "referencePoint=[]\n",
    "\n",
    "for i in range(30):\n",
    "    referencePoint.append(Z1[i] + Z2[i] + Z3[i])\n",
    "    print(\"Reference point: \\n\",referencePoint[i])\n",
    "    print(\"\\n\")\n",
    "    \n",
    "basePoint = G\n",
    "end_time = time.time()\n",
    "print(\"Time taken:\", end_time - start_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1b87a3ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of cycle: 19 \n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Cycle of Ps\n",
    "points = []\n",
    "points.append(P)\n",
    "check = False\n",
    "temp = basePoint\n",
    "while check == False:\n",
    "    temp += basePoint\n",
    "    if(temp == I):\n",
    "        check = True\n",
    "    points.append(temp)\n",
    "print(\"Length of cycle:\",len(points),'\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fac6e498",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "293094\n",
      "\n",
      "Reference Point matches the point 4 in the cycle\n",
      "259083\n",
      "\n",
      "Reference Point matches the point 6 in the cycle\n",
      "334225\n",
      "\n",
      "Reference Point matches the point 6 in the cycle\n",
      "268143\n",
      "\n",
      "Reference Point matches the point 1 in the cycle\n",
      "364840\n",
      "\n",
      "Reference Point matches the point 7 in the cycle\n",
      "276781\n",
      "\n",
      "Reference Point matches the point 13 in the cycle\n",
      "332736\n",
      "\n",
      "Reference Point matches the point 17 in the cycle\n",
      "274281\n",
      "\n",
      "Reference Point matches the point 18 in the cycle\n",
      "268316\n",
      "\n",
      "Reference Point matches the point 9 in the cycle\n",
      "376871\n",
      "\n",
      "Reference Point matches the point 6 in the cycle\n",
      "301638\n",
      "\n",
      "Reference Point matches the point 2 in the cycle\n",
      "292708\n",
      "\n",
      "Reference Point matches the point 5 in the cycle\n",
      "291329\n",
      "\n",
      "Reference Point matches the point 15 in the cycle\n",
      "331525\n",
      "\n",
      "Reference Point matches the point 2 in the cycle\n",
      "291615\n",
      "\n",
      "Reference Point matches the point 6 in the cycle\n",
      "305145\n",
      "\n",
      "Reference Point matches the point 15 in the cycle\n",
      "267263\n",
      "\n",
      "Reference Point matches the point 7 in the cycle\n",
      "320388\n",
      "\n",
      "Reference Point matches the point 12 in the cycle\n",
      "235794\n",
      "\n",
      "Reference Point matches the point 15 in the cycle\n",
      "256065\n",
      "\n",
      "Reference Point matches the point 5 in the cycle\n",
      "307698\n",
      "\n",
      "Reference Point matches the point 13 in the cycle\n",
      "280412\n",
      "\n",
      "Reference Point matches the point 4 in the cycle\n",
      "282213\n",
      "\n",
      "Reference Point matches the point 12 in the cycle\n",
      "283059\n",
      "\n",
      "Reference Point matches the point 1 in the cycle\n",
      "312665\n",
      "\n",
      "Reference Point matches the point 17 in the cycle\n",
      "290324\n",
      "\n",
      "Reference Point matches the point 9 in the cycle\n",
      "275424\n",
      "\n",
      "Reference Point matches the point 15 in the cycle\n",
      "352509\n",
      "\n",
      "Reference Point matches the point 10 in the cycle\n",
      "335277\n",
      "\n",
      "Reference Point matches the point 16 in the cycle\n",
      "237797\n",
      "\n",
      "Reference Point matches the point 9 in the cycle\n",
      "Time taken: 0.011966943740844727\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "start_time = time.time()\n",
    "iteration = 0\n",
    "for r in range(10):\n",
    "    for i in points:\n",
    "        if(referencePoint[r] == i):\n",
    "            num = points.index(i)\n",
    "\n",
    "        iteration += 1\n",
    "        \n",
    "#     weight1=(w1[r]/100000)\n",
    "#     weight2=(w2[r]/100000)\n",
    "#     weight3=(w3[r]/100000)\n",
    "    print(w1[r]+w2[r]+w3[r])\n",
    "    print(\"\\nReference Point matches the point\",num,\"in the cycle\")\n",
    "end_time = time.time()\n",
    "print(\"Time taken:\", end_time - start_time)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51a0bdfd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
